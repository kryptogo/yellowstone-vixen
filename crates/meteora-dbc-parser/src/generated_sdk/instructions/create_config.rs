//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::ConfigParameters;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const CREATE_CONFIG_DISCRIMINATOR: [u8; 8] = [201, 207, 243, 114, 75, 111, 47, 189];

/// Accounts.
#[derive(Debug)]
pub struct CreateConfig {
    pub config: solana_pubkey::Pubkey,

    pub fee_claimer: solana_pubkey::Pubkey,

    pub leftover_receiver: solana_pubkey::Pubkey,
    /// quote mint
    pub quote_mint: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl CreateConfig {
    pub fn instruction(
        &self,
        args: CreateConfigInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateConfigInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.config, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.fee_claimer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.leftover_receiver,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionData {
    discriminator: [u8; 8],
}

impl CreateConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189],
        }
    }
}

impl Default for CreateConfigInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionArgs {
    pub config_parameters: ConfigParameters,
}

/// Instruction builder for `CreateConfig`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` config
///   1. `[]` fee_claimer
///   2. `[]` leftover_receiver
///   3. `[]` quote_mint
///   4. `[writable, signer]` payer
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   6. `[]` event_authority
///   7. `[]` program
#[derive(Clone, Debug, Default)]
pub struct CreateConfigBuilder {
    config: Option<solana_pubkey::Pubkey>,
    fee_claimer: Option<solana_pubkey::Pubkey>,
    leftover_receiver: Option<solana_pubkey::Pubkey>,
    quote_mint: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    config_parameters: Option<ConfigParameters>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateConfigBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn fee_claimer(&mut self, fee_claimer: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_claimer = Some(fee_claimer);
        self
    }
    #[inline(always)]
    pub fn leftover_receiver(&mut self, leftover_receiver: solana_pubkey::Pubkey) -> &mut Self {
        self.leftover_receiver = Some(leftover_receiver);
        self
    }
    /// quote mint
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn config_parameters(&mut self, config_parameters: ConfigParameters) -> &mut Self {
        self.config_parameters = Some(config_parameters);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateConfig {
            config: self.config.expect("config is not set"),
            fee_claimer: self.fee_claimer.expect("fee_claimer is not set"),
            leftover_receiver: self
                .leftover_receiver
                .expect("leftover_receiver is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = CreateConfigInstructionArgs {
            config_parameters: self
                .config_parameters
                .clone()
                .expect("config_parameters is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_config` CPI accounts.
pub struct CreateConfigCpiAccounts<'a, 'b> {
    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub fee_claimer: &'b solana_account_info::AccountInfo<'a>,

    pub leftover_receiver: &'b solana_account_info::AccountInfo<'a>,
    /// quote mint
    pub quote_mint: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_config` CPI instruction.
pub struct CreateConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub fee_claimer: &'b solana_account_info::AccountInfo<'a>,

    pub leftover_receiver: &'b solana_account_info::AccountInfo<'a>,
    /// quote mint
    pub quote_mint: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateConfigInstructionArgs,
}

impl<'a, 'b> CreateConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateConfigCpiAccounts<'a, 'b>,
        args: CreateConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            fee_claimer: accounts.fee_claimer,
            leftover_receiver: accounts.leftover_receiver,
            quote_mint: accounts.quote_mint,
            payer: accounts.payer,
            system_program: accounts.system_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.config.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.fee_claimer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.leftover_receiver.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.fee_claimer.clone());
        account_infos.push(self.leftover_receiver.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` config
///   1. `[]` fee_claimer
///   2. `[]` leftover_receiver
///   3. `[]` quote_mint
///   4. `[writable, signer]` payer
///   5. `[]` system_program
///   6. `[]` event_authority
///   7. `[]` program
#[derive(Clone, Debug)]
pub struct CreateConfigCpiBuilder<'a, 'b> {
    instruction: Box<CreateConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateConfigCpiBuilderInstruction {
            __program: program,
            config: None,
            fee_claimer: None,
            leftover_receiver: None,
            quote_mint: None,
            payer: None,
            system_program: None,
            event_authority: None,
            program: None,
            config_parameters: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(&mut self, config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn fee_claimer(
        &mut self,
        fee_claimer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_claimer = Some(fee_claimer);
        self
    }
    #[inline(always)]
    pub fn leftover_receiver(
        &mut self,
        leftover_receiver: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.leftover_receiver = Some(leftover_receiver);
        self
    }
    /// quote mint
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn config_parameters(&mut self, config_parameters: ConfigParameters) -> &mut Self {
        self.instruction.config_parameters = Some(config_parameters);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = CreateConfigInstructionArgs {
            config_parameters: self
                .instruction
                .config_parameters
                .clone()
                .expect("config_parameters is not set"),
        };
        let instruction = CreateConfigCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            fee_claimer: self
                .instruction
                .fee_claimer
                .expect("fee_claimer is not set"),

            leftover_receiver: self
                .instruction
                .leftover_receiver
                .expect("leftover_receiver is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    config: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_claimer: Option<&'b solana_account_info::AccountInfo<'a>>,
    leftover_receiver: Option<&'b solana_account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    config_parameters: Option<ConfigParameters>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
