//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const TRANSFER_POOL_CREATOR_DISCRIMINATOR: [u8; 8] = [20, 7, 169, 33, 58, 147, 166, 33];

/// Accounts.
#[derive(Debug)]
pub struct TransferPoolCreator {
    pub virtual_pool: solana_pubkey::Pubkey,

    pub config: solana_pubkey::Pubkey,

    pub creator: solana_pubkey::Pubkey,

    pub new_creator: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl TransferPoolCreator {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.virtual_pool,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.creator,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.new_creator,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&TransferPoolCreatorInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TransferPoolCreatorInstructionData {
    discriminator: [u8; 8],
}

impl TransferPoolCreatorInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [20, 7, 169, 33, 58, 147, 166, 33],
        }
    }
}

impl Default for TransferPoolCreatorInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `TransferPoolCreator`.
///
/// ### Accounts:
///
///   0. `[writable]` virtual_pool
///   1. `[]` config
///   2. `[signer]` creator
///   3. `[]` new_creator
///   4. `[]` event_authority
///   5. `[]` program
#[derive(Clone, Debug, Default)]
pub struct TransferPoolCreatorBuilder {
    virtual_pool: Option<solana_pubkey::Pubkey>,
    config: Option<solana_pubkey::Pubkey>,
    creator: Option<solana_pubkey::Pubkey>,
    new_creator: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl TransferPoolCreatorBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn virtual_pool(&mut self, virtual_pool: solana_pubkey::Pubkey) -> &mut Self {
        self.virtual_pool = Some(virtual_pool);
        self
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }
    #[inline(always)]
    pub fn new_creator(&mut self, new_creator: solana_pubkey::Pubkey) -> &mut Self {
        self.new_creator = Some(new_creator);
        self
    }
    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = TransferPoolCreator {
            virtual_pool: self.virtual_pool.expect("virtual_pool is not set"),
            config: self.config.expect("config is not set"),
            creator: self.creator.expect("creator is not set"),
            new_creator: self.new_creator.expect("new_creator is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `transfer_pool_creator` CPI accounts.
pub struct TransferPoolCreatorCpiAccounts<'a, 'b> {
    pub virtual_pool: &'b solana_account_info::AccountInfo<'a>,

    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub creator: &'b solana_account_info::AccountInfo<'a>,

    pub new_creator: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `transfer_pool_creator` CPI instruction.
pub struct TransferPoolCreatorCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub virtual_pool: &'b solana_account_info::AccountInfo<'a>,

    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub creator: &'b solana_account_info::AccountInfo<'a>,

    pub new_creator: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> TransferPoolCreatorCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: TransferPoolCreatorCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            virtual_pool: accounts.virtual_pool,
            config: accounts.config,
            creator: accounts.creator,
            new_creator: accounts.new_creator,
            event_authority: accounts.event_authority,
            program: accounts.program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.virtual_pool.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.creator.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.new_creator.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&TransferPoolCreatorInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.virtual_pool.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.new_creator.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TransferPoolCreator` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` virtual_pool
///   1. `[]` config
///   2. `[signer]` creator
///   3. `[]` new_creator
///   4. `[]` event_authority
///   5. `[]` program
#[derive(Clone, Debug)]
pub struct TransferPoolCreatorCpiBuilder<'a, 'b> {
    instruction: Box<TransferPoolCreatorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TransferPoolCreatorCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TransferPoolCreatorCpiBuilderInstruction {
            __program: program,
            virtual_pool: None,
            config: None,
            creator: None,
            new_creator: None,
            event_authority: None,
            program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn virtual_pool(
        &mut self,
        virtual_pool: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtual_pool = Some(virtual_pool);
        self
    }
    #[inline(always)]
    pub fn config(&mut self, config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }
    #[inline(always)]
    pub fn new_creator(
        &mut self,
        new_creator: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_creator = Some(new_creator);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = TransferPoolCreatorCpi {
            __program: self.instruction.__program,

            virtual_pool: self
                .instruction
                .virtual_pool
                .expect("virtual_pool is not set"),

            config: self.instruction.config.expect("config is not set"),

            creator: self.instruction.creator.expect("creator is not set"),

            new_creator: self
                .instruction
                .new_creator
                .expect("new_creator is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TransferPoolCreatorCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    virtual_pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    config: Option<&'b solana_account_info::AccountInfo<'a>>,
    creator: Option<&'b solana_account_info::AccountInfo<'a>>,
    new_creator: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
