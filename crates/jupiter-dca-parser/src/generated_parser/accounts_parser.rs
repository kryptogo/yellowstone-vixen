//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{accounts::Dca, deserialize_checked, ID};

/// Dca Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum DcaProgramState {
    Dca(Dca),
}

impl DcaProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [82, 93, 90, 127, 40, 101, 145, 154] => Ok(DcaProgramState::Dca(deserialize_checked(
                data_bytes,
                &acc_discriminator,
            )?)),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = DcaProgramState;

    fn id(&self) -> std::borrow::Cow<'static, str> { "dca::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program_error::ProgramError::InvalidArgument)?;
        let res = DcaProgramState::try_unpack(&inner.data);

        #[cfg(feature = "tracing")]
        if let Err(e) = &res {
            let acc_discriminator: [u8; 8] = inner.data[0..8].try_into()?;
            tracing::info!(
                name: "incorrectly_parsed_account",
                name = "account_update",
                program = ID.to_string(),
                account = "deserialization_error",
                discriminator = ?acc_discriminator,
                error = ?e
            );
        }

        res
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, Dca, DcaProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::Dca> for Dca {
        fn into_proto(self) -> proto_def::Dca {
            proto_def::Dca {
                user: self.user.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                idx: self.idx,
                next_cycle_at: self.next_cycle_at,
                in_deposited: self.in_deposited,
                in_withdrawn: self.in_withdrawn,
                out_withdrawn: self.out_withdrawn,
                in_used: self.in_used,
                out_received: self.out_received,
                in_amount_per_cycle: self.in_amount_per_cycle,
                cycle_frequency: self.cycle_frequency,
                next_cycle_amount_left: self.next_cycle_amount_left,
                in_account: self.in_account.to_string(),
                out_account: self.out_account.to_string(),
                min_out_amount: self.min_out_amount,
                max_out_amount: self.max_out_amount,
                keeper_in_balance_before_borrow: self.keeper_in_balance_before_borrow,
                dca_out_balance_before_swap: self.dca_out_balance_before_swap,
                created_at: self.created_at,
                bump: self.bump.into(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for DcaProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                DcaProgramState::Dca(data) => {
                    proto_def::program_state::StateOneof::Dca(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
