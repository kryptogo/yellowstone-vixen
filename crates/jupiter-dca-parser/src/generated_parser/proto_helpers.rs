//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::CollectedFee};
    impl IntoProto<proto_def::CollectedFee> for CollectedFee {
        fn into_proto(self) -> proto_def::CollectedFee {
            proto_def::CollectedFee {
                user_key: self.user_key.to_string(),
                dca_key: self.dca_key.to_string(),
                mint: self.mint.to_string(),
                amount: self.amount,
            }
        }
    }
    use crate::types::Filled;
    impl IntoProto<proto_def::Filled> for Filled {
        fn into_proto(self) -> proto_def::Filled {
            proto_def::Filled {
                user_key: self.user_key.to_string(),
                dca_key: self.dca_key.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                in_amount: self.in_amount,
                out_amount: self.out_amount,
                fee_mint: self.fee_mint.to_string(),
                fee: self.fee,
            }
        }
    }
    use crate::types::Opened;
    impl IntoProto<proto_def::Opened> for Opened {
        fn into_proto(self) -> proto_def::Opened {
            proto_def::Opened {
                user_key: self.user_key.to_string(),
                dca_key: self.dca_key.to_string(),
                in_deposited: self.in_deposited,
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                cycle_frequency: self.cycle_frequency,
                in_amount_per_cycle: self.in_amount_per_cycle,
                created_at: self.created_at,
            }
        }
    }
    use crate::types::Closed;
    impl IntoProto<proto_def::Closed> for Closed {
        fn into_proto(self) -> proto_def::Closed {
            proto_def::Closed {
                user_key: self.user_key.to_string(),
                dca_key: self.dca_key.to_string(),
                in_deposited: self.in_deposited,
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                cycle_frequency: self.cycle_frequency,
                in_amount_per_cycle: self.in_amount_per_cycle,
                created_at: self.created_at,
                total_in_withdrawn: self.total_in_withdrawn,
                total_out_withdrawn: self.total_out_withdrawn,
                unfilled_amount: self.unfilled_amount,
                user_closed: self.user_closed,
            }
        }
    }
    use crate::types::Withdraw;
    impl IntoProto<proto_def::Withdraw> for Withdraw {
        fn into_proto(self) -> proto_def::Withdraw {
            proto_def::Withdraw {
                dca_key: self.dca_key.to_string(),
                in_amount: self.in_amount,
                out_amount: self.out_amount,
                user_withdraw: self.user_withdraw,
            }
        }
    }
    use crate::types::Deposit;
    impl IntoProto<proto_def::Deposit> for Deposit {
        fn into_proto(self) -> proto_def::Deposit {
            proto_def::Deposit {
                dca_key: self.dca_key.to_string(),
                amount: self.amount,
            }
        }
    }
}
