//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

#[cfg(feature = "shared-data")]
use std::sync::Arc;

#[cfg(feature = "shared-data")]
use yellowstone_vixen_core::InstructionUpdateOutput;

use crate::{
    deserialize_checked,
    instructions::{
        CloseDca as CloseDcaIxAccounts, Deposit as DepositIxAccounts,
        DepositInstructionArgs as DepositIxData, EndAndClose as EndAndCloseIxAccounts,
        FulfillDlmmFill as FulfillDlmmFillIxAccounts,
        FulfillDlmmFillInstructionArgs as FulfillDlmmFillIxData,
        FulfillFlashFill as FulfillFlashFillIxAccounts,
        FulfillFlashFillInstructionArgs as FulfillFlashFillIxData,
        InitiateDlmmFill as InitiateDlmmFillIxAccounts,
        InitiateFlashFill as InitiateFlashFillIxAccounts, OpenDca as OpenDcaIxAccounts,
        OpenDcaInstructionArgs as OpenDcaIxData, OpenDcaV2 as OpenDcaV2IxAccounts,
        OpenDcaV2InstructionArgs as OpenDcaV2IxData, Transfer as TransferIxAccounts,
        Withdraw as WithdrawIxAccounts, WithdrawFees as WithdrawFeesIxAccounts,
        WithdrawFeesInstructionArgs as WithdrawFeesIxData,
        WithdrawInstructionArgs as WithdrawIxData,
    },
    ID,
};

/// Dca Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum DcaProgramIx {
    OpenDca(OpenDcaIxAccounts, OpenDcaIxData),
    OpenDcaV2(OpenDcaV2IxAccounts, OpenDcaV2IxData),
    CloseDca(CloseDcaIxAccounts),
    Withdraw(WithdrawIxAccounts, WithdrawIxData),
    Deposit(DepositIxAccounts, DepositIxData),
    WithdrawFees(WithdrawFeesIxAccounts, WithdrawFeesIxData),
    InitiateFlashFill(InitiateFlashFillIxAccounts),
    FulfillFlashFill(FulfillFlashFillIxAccounts, FulfillFlashFillIxData),
    InitiateDlmmFill(InitiateDlmmFillIxAccounts),
    FulfillDlmmFill(FulfillDlmmFillIxAccounts, FulfillDlmmFillIxData),
    Transfer(TransferIxAccounts),
    EndAndClose(EndAndCloseIxAccounts),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    #[cfg(not(feature = "shared-data"))]
    type Output = DcaProgramIx;
    #[cfg(feature = "shared-data")]
    type Output = InstructionUpdateOutput<DcaProgramIx>;

    fn id(&self) -> std::borrow::Cow<'static, str> { "Dca::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            let res = InstructionParser::parse_impl(ix_update);

            #[cfg(feature = "tracing")]
            if let Err(e) = &res {
                let ix_discriminator: [u8; 8] = ix_update.data[0..8].try_into()?;

                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "deserialization_error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            }

            res
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<<Self as yellowstone_vixen_core::Parser>::Output> {
        let accounts_len = ix.accounts.len();
        let accounts = &mut ix.accounts.iter();

        #[cfg(feature = "shared-data")]
        let shared_data = Arc::clone(&ix.shared);
        #[cfg(feature = "shared-data")]
        let ix_index = ix.ix_index;

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [36, 65, 185, 54, 1, 210, 100, 163] => {
                let expected_accounts_len = 12;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = OpenDcaIxAccounts {
                    dca: next_account(accounts)?,
                    user: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    user_ata: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: OpenDcaIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::OpenDca(ix_accounts, de_ix_data))
            },
            [142, 119, 43, 109, 162, 52, 11, 177] => {
                let expected_accounts_len = 13;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = OpenDcaV2IxAccounts {
                    dca: next_account(accounts)?,
                    user: next_account(accounts)?,
                    payer: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    user_ata: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: OpenDcaV2IxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::OpenDcaV2(ix_accounts, de_ix_data))
            },
            [22, 7, 33, 98, 168, 183, 34, 243] => {
                let expected_accounts_len = 13;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CloseDcaIxAccounts {
                    user: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    user_in_ata: next_account(accounts)?,
                    user_out_ata: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(DcaProgramIx::CloseDca(ix_accounts))
            },
            [183, 18, 70, 156, 148, 109, 161, 34] => {
                let expected_accounts_len = 12;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = WithdrawIxAccounts {
                    user: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    dca_ata: next_account(accounts)?,
                    user_in_ata: next_program_id_optional_account(accounts)?,
                    user_out_ata: next_program_id_optional_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: WithdrawIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::Withdraw(ix_accounts, de_ix_data))
            },
            [242, 35, 198, 137, 82, 225, 242, 182] => {
                let expected_accounts_len = 7;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = DepositIxAccounts {
                    user: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    user_in_ata: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: DepositIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::Deposit(ix_accounts, de_ix_data))
            },
            [198, 212, 171, 109, 144, 215, 174, 89] => {
                let expected_accounts_len = 8;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = WithdrawFeesIxAccounts {
                    admin: next_account(accounts)?,
                    mint: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    program_fee_ata: next_account(accounts)?,
                    admin_fee_ata: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                };
                let de_ix_data: WithdrawFeesIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::WithdrawFees(ix_accounts, de_ix_data))
            },
            [143, 205, 3, 191, 162, 215, 245, 49] => {
                let expected_accounts_len = 10;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = InitiateFlashFillIxAccounts {
                    keeper: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    keeper_in_ata: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    instructions_sysvar: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                };
                Ok(DcaProgramIx::InitiateFlashFill(ix_accounts))
            },
            [115, 64, 226, 78, 33, 211, 105, 162] => {
                let expected_accounts_len = 15;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = FulfillFlashFillIxAccounts {
                    keeper: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    keeper_in_ata: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    fee_ata: next_account(accounts)?,
                    instructions_sysvar: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: FulfillFlashFillIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::FulfillFlashFill(ix_accounts, de_ix_data))
            },
            [155, 193, 80, 121, 91, 147, 254, 187] => {
                let expected_accounts_len = 10;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = InitiateDlmmFillIxAccounts {
                    keeper: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    keeper_in_ata: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    instructions_sysvar: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                };
                Ok(DcaProgramIx::InitiateDlmmFill(ix_accounts))
            },
            [1, 230, 118, 251, 45, 177, 101, 187] => {
                let expected_accounts_len = 15;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = FulfillDlmmFillIxAccounts {
                    keeper: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    keeper_in_ata: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    fee_ata: next_account(accounts)?,
                    instructions_sysvar: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: FulfillDlmmFillIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DcaProgramIx::FulfillDlmmFill(ix_accounts, de_ix_data))
            },
            [163, 52, 200, 231, 140, 3, 69, 186] => {
                let expected_accounts_len = 12;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = TransferIxAccounts {
                    keeper: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    user: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    dca_out_ata: next_account(accounts)?,
                    user_out_ata: next_program_id_optional_account(accounts)?,
                    intermediate_account: next_program_id_optional_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(DcaProgramIx::Transfer(ix_accounts))
            },
            [83, 125, 166, 69, 247, 252, 103, 133] => {
                let expected_accounts_len = 15;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = EndAndCloseIxAccounts {
                    keeper: next_account(accounts)?,
                    dca: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    in_ata: next_account(accounts)?,
                    out_ata: next_account(accounts)?,
                    user: next_account(accounts)?,
                    user_out_ata: next_program_id_optional_account(accounts)?,
                    init_user_out_ata: next_program_id_optional_account(accounts)?,
                    intermediate_account: next_program_id_optional_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(DcaProgramIx::EndAndClose(ix_accounts))
            },
            // self cpi log
            [0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d] => {
                Err(yellowstone_vixen_core::ParseError::Filtered)
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        #[cfg(not(feature = "shared-data"))]
        return ix;

        #[cfg(feature = "shared-data")]
        ix.map(|ix| InstructionUpdateOutput {
            parsed_ix: ix,
            shared_data,
            ix_index,
        })
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

fn next_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
) -> Result<solana_pubkey::Pubkey, yellowstone_vixen_core::ParseError> {
    accounts
        .next()
        .ok_or(yellowstone_vixen_core::ParseError::from(
            "No more accounts to parse",
        ))
        .map(|acc| acc.0.into())
}

/// Gets the next optional account using the ommited account strategy (account is not passed at all at the instruction).
/// ### Be careful to use this function when more than one account is optional in the Instruction.
///  Only by order there is no way to which ones of the optional accounts are present.
pub fn next_optional_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
    actual_accounts_len: usize,
    expected_accounts_len: &mut usize,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    if actual_accounts_len == *expected_accounts_len + 1 {
        *expected_accounts_len += 1;
        Ok(Some(next_account(accounts)?))
    } else {
        Ok(None)
    }
}

/// Gets the next optional account using the traditional Program ID strategy.
///  (If account key is the program ID, means account is not present)
pub fn next_program_id_optional_account<
    'a,
    T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>,
>(
    accounts: &mut T,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    let account_key = next_account(accounts)?;
    if account_key.eq(&ID) {
        Ok(None)
    } else {
        Ok(Some(account_key))
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{DcaProgramIx, InstructionParser, OpenDcaIxAccounts};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::OpenDcaIxAccounts> for OpenDcaIxAccounts {
        fn into_proto(self) -> proto_def::OpenDcaIxAccounts {
            proto_def::OpenDcaIxAccounts {
                dca: self.dca.to_string(),
                user: self.user.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                user_ata: self.user_ata.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::OpenDcaIxData;
    impl IntoProto<proto_def::OpenDcaIxData> for OpenDcaIxData {
        fn into_proto(self) -> proto_def::OpenDcaIxData {
            proto_def::OpenDcaIxData {
                application_idx: self.application_idx,
                in_amount: self.in_amount,
                in_amount_per_cycle: self.in_amount_per_cycle,
                cycle_frequency: self.cycle_frequency,
                min_out_amount: self.min_out_amount,
                max_out_amount: self.max_out_amount,
                start_at: self.start_at,
                close_wsol_in_ata: self.close_wsol_in_ata,
            }
        }
    }
    use super::OpenDcaV2IxAccounts;
    impl IntoProto<proto_def::OpenDcaV2IxAccounts> for OpenDcaV2IxAccounts {
        fn into_proto(self) -> proto_def::OpenDcaV2IxAccounts {
            proto_def::OpenDcaV2IxAccounts {
                dca: self.dca.to_string(),
                user: self.user.to_string(),
                payer: self.payer.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                user_ata: self.user_ata.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::OpenDcaV2IxData;
    impl IntoProto<proto_def::OpenDcaV2IxData> for OpenDcaV2IxData {
        fn into_proto(self) -> proto_def::OpenDcaV2IxData {
            proto_def::OpenDcaV2IxData {
                application_idx: self.application_idx,
                in_amount: self.in_amount,
                in_amount_per_cycle: self.in_amount_per_cycle,
                cycle_frequency: self.cycle_frequency,
                min_out_amount: self.min_out_amount,
                max_out_amount: self.max_out_amount,
                start_at: self.start_at,
            }
        }
    }
    use super::CloseDcaIxAccounts;
    impl IntoProto<proto_def::CloseDcaIxAccounts> for CloseDcaIxAccounts {
        fn into_proto(self) -> proto_def::CloseDcaIxAccounts {
            proto_def::CloseDcaIxAccounts {
                user: self.user.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                user_in_ata: self.user_in_ata.to_string(),
                user_out_ata: self.user_out_ata.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::WithdrawIxAccounts;
    impl IntoProto<proto_def::WithdrawIxAccounts> for WithdrawIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawIxAccounts {
            proto_def::WithdrawIxAccounts {
                user: self.user.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                dca_ata: self.dca_ata.to_string(),
                user_in_ata: self.user_in_ata.map(|p| p.to_string()),
                user_out_ata: self.user_out_ata.map(|p| p.to_string()),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::WithdrawIxData;
    impl IntoProto<proto_def::WithdrawIxData> for WithdrawIxData {
        fn into_proto(self) -> proto_def::WithdrawIxData {
            proto_def::WithdrawIxData {
                withdraw_amount: self.withdraw_amount,
                withdrawal: self.withdrawal as i32,
            }
        }
    }
    use super::DepositIxAccounts;
    impl IntoProto<proto_def::DepositIxAccounts> for DepositIxAccounts {
        fn into_proto(self) -> proto_def::DepositIxAccounts {
            proto_def::DepositIxAccounts {
                user: self.user.to_string(),
                dca: self.dca.to_string(),
                in_ata: self.in_ata.to_string(),
                user_in_ata: self.user_in_ata.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::DepositIxData;
    impl IntoProto<proto_def::DepositIxData> for DepositIxData {
        fn into_proto(self) -> proto_def::DepositIxData {
            proto_def::DepositIxData {
                deposit_in: self.deposit_in,
            }
        }
    }
    use super::WithdrawFeesIxAccounts;
    impl IntoProto<proto_def::WithdrawFeesIxAccounts> for WithdrawFeesIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawFeesIxAccounts {
            proto_def::WithdrawFeesIxAccounts {
                admin: self.admin.to_string(),
                mint: self.mint.to_string(),
                fee_authority: self.fee_authority.to_string(),
                program_fee_ata: self.program_fee_ata.to_string(),
                admin_fee_ata: self.admin_fee_ata.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
            }
        }
    }
    use super::WithdrawFeesIxData;
    impl IntoProto<proto_def::WithdrawFeesIxData> for WithdrawFeesIxData {
        fn into_proto(self) -> proto_def::WithdrawFeesIxData {
            proto_def::WithdrawFeesIxData {
                amount: self.amount,
            }
        }
    }
    use super::InitiateFlashFillIxAccounts;
    impl IntoProto<proto_def::InitiateFlashFillIxAccounts> for InitiateFlashFillIxAccounts {
        fn into_proto(self) -> proto_def::InitiateFlashFillIxAccounts {
            proto_def::InitiateFlashFillIxAccounts {
                keeper: self.keeper.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                keeper_in_ata: self.keeper_in_ata.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                instructions_sysvar: self.instructions_sysvar.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
            }
        }
    }
    use super::FulfillFlashFillIxAccounts;
    impl IntoProto<proto_def::FulfillFlashFillIxAccounts> for FulfillFlashFillIxAccounts {
        fn into_proto(self) -> proto_def::FulfillFlashFillIxAccounts {
            proto_def::FulfillFlashFillIxAccounts {
                keeper: self.keeper.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                keeper_in_ata: self.keeper_in_ata.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                fee_authority: self.fee_authority.to_string(),
                fee_ata: self.fee_ata.to_string(),
                instructions_sysvar: self.instructions_sysvar.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::FulfillFlashFillIxData;
    impl IntoProto<proto_def::FulfillFlashFillIxData> for FulfillFlashFillIxData {
        fn into_proto(self) -> proto_def::FulfillFlashFillIxData {
            proto_def::FulfillFlashFillIxData {
                repay_amount: self.repay_amount,
            }
        }
    }
    use super::InitiateDlmmFillIxAccounts;
    impl IntoProto<proto_def::InitiateDlmmFillIxAccounts> for InitiateDlmmFillIxAccounts {
        fn into_proto(self) -> proto_def::InitiateDlmmFillIxAccounts {
            proto_def::InitiateDlmmFillIxAccounts {
                keeper: self.keeper.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                keeper_in_ata: self.keeper_in_ata.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                instructions_sysvar: self.instructions_sysvar.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
            }
        }
    }
    use super::FulfillDlmmFillIxAccounts;
    impl IntoProto<proto_def::FulfillDlmmFillIxAccounts> for FulfillDlmmFillIxAccounts {
        fn into_proto(self) -> proto_def::FulfillDlmmFillIxAccounts {
            proto_def::FulfillDlmmFillIxAccounts {
                keeper: self.keeper.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                keeper_in_ata: self.keeper_in_ata.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                fee_authority: self.fee_authority.to_string(),
                fee_ata: self.fee_ata.to_string(),
                instructions_sysvar: self.instructions_sysvar.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::FulfillDlmmFillIxData;
    impl IntoProto<proto_def::FulfillDlmmFillIxData> for FulfillDlmmFillIxData {
        fn into_proto(self) -> proto_def::FulfillDlmmFillIxData {
            proto_def::FulfillDlmmFillIxData {
                repay_amount: self.repay_amount,
            }
        }
    }
    use super::TransferIxAccounts;
    impl IntoProto<proto_def::TransferIxAccounts> for TransferIxAccounts {
        fn into_proto(self) -> proto_def::TransferIxAccounts {
            proto_def::TransferIxAccounts {
                keeper: self.keeper.to_string(),
                dca: self.dca.to_string(),
                user: self.user.to_string(),
                output_mint: self.output_mint.to_string(),
                dca_out_ata: self.dca_out_ata.to_string(),
                user_out_ata: self.user_out_ata.map(|p| p.to_string()),
                intermediate_account: self.intermediate_account.map(|p| p.to_string()),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::EndAndCloseIxAccounts;
    impl IntoProto<proto_def::EndAndCloseIxAccounts> for EndAndCloseIxAccounts {
        fn into_proto(self) -> proto_def::EndAndCloseIxAccounts {
            proto_def::EndAndCloseIxAccounts {
                keeper: self.keeper.to_string(),
                dca: self.dca.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                in_ata: self.in_ata.to_string(),
                out_ata: self.out_ata.to_string(),
                user: self.user.to_string(),
                user_out_ata: self.user_out_ata.map(|p| p.to_string()),
                init_user_out_ata: self.init_user_out_ata.map(|p| p.to_string()),
                intermediate_account: self.intermediate_account.map(|p| p.to_string()),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for DcaProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                DcaProgramIx::OpenDca(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::OpenDca(
                        proto_def::OpenDcaIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::OpenDcaV2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::OpenDcaV2(
                        proto_def::OpenDcaV2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::CloseDca(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CloseDca(
                        proto_def::CloseDcaIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::Withdraw(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Withdraw(
                        proto_def::WithdrawIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::Deposit(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Deposit(
                        proto_def::DepositIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::WithdrawFees(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::WithdrawFees(
                        proto_def::WithdrawFeesIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::InitiateFlashFill(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitiateFlashFill(
                        proto_def::InitiateFlashFillIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::FulfillFlashFill(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FulfillFlashFill(
                        proto_def::FulfillFlashFillIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::InitiateDlmmFill(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitiateDlmmFill(
                        proto_def::InitiateDlmmFillIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::FulfillDlmmFill(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FulfillDlmmFill(
                        proto_def::FulfillDlmmFillIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::Transfer(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Transfer(
                        proto_def::TransferIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                DcaProgramIx::EndAndClose(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::EndAndClose(
                        proto_def::EndAndCloseIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message {
            #[cfg(not(feature = "shared-data"))]
            return value.into_proto();

            #[cfg(feature = "shared-data")]
            value.parsed_ix.into_proto()
        }
    }
}
