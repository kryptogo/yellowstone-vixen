//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::SwapArgs;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const COMMISSION_SPL_PROXY_SWAP_DISCRIMINATOR: [u8; 8] = [96, 67, 12, 151, 129, 164, 18, 71];

/// Accounts.
#[derive(Debug)]
pub struct CommissionSplProxySwap {
    pub payer: solana_pubkey::Pubkey,

    pub source_token_account: solana_pubkey::Pubkey,

    pub destination_token_account: solana_pubkey::Pubkey,

    pub source_mint: solana_pubkey::Pubkey,

    pub destination_mint: solana_pubkey::Pubkey,

    pub commission_token_account: solana_pubkey::Pubkey,

    pub sa_authority: Option<solana_pubkey::Pubkey>,

    pub source_token_sa: Option<solana_pubkey::Pubkey>,

    pub destination_token_sa: Option<solana_pubkey::Pubkey>,

    pub source_token_program: Option<solana_pubkey::Pubkey>,

    pub destination_token_program: Option<solana_pubkey::Pubkey>,

    pub associated_token_program: Option<solana_pubkey::Pubkey>,

    pub system_program: Option<solana_pubkey::Pubkey>,
}

impl CommissionSplProxySwap {
    pub fn instruction(
        &self,
        args: CommissionSplProxySwapInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CommissionSplProxySwapInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.source_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.destination_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.source_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.destination_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.commission_token_account,
            false,
        ));
        if let Some(sa_authority) = self.sa_authority {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                sa_authority,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(source_token_sa) = self.source_token_sa {
            accounts.push(solana_instruction::AccountMeta::new(source_token_sa, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(destination_token_sa) = self.destination_token_sa {
            accounts.push(solana_instruction::AccountMeta::new(
                destination_token_sa,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(source_token_program) = self.source_token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                source_token_program,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(destination_token_program) = self.destination_token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                destination_token_program,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(associated_token_program) = self.associated_token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                associated_token_program,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(system_program) = self.system_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                system_program,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CommissionSplProxySwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::DEX_SOLANA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CommissionSplProxySwapInstructionData {
    discriminator: [u8; 8],
}

impl CommissionSplProxySwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [96, 67, 12, 151, 129, 164, 18, 71],
        }
    }
}

impl Default for CommissionSplProxySwapInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CommissionSplProxySwapInstructionArgs {
    pub data: SwapArgs,
    pub commission_rate: u16,
    pub commission_direction: bool,
    pub order_id: u64,
}

/// Instruction builder for `CommissionSplProxySwap`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` source_token_account
///   2. `[writable]` destination_token_account
///   3. `[]` source_mint
///   4. `[]` destination_mint
///   5. `[writable]` commission_token_account
///   6. `[optional]` sa_authority
///   7. `[writable, optional]` source_token_sa
///   8. `[writable, optional]` destination_token_sa
///   9. `[optional]` source_token_program
///   10. `[optional]` destination_token_program
///   11. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   12. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CommissionSplProxySwapBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    source_token_account: Option<solana_pubkey::Pubkey>,
    destination_token_account: Option<solana_pubkey::Pubkey>,
    source_mint: Option<solana_pubkey::Pubkey>,
    destination_mint: Option<solana_pubkey::Pubkey>,
    commission_token_account: Option<solana_pubkey::Pubkey>,
    sa_authority: Option<solana_pubkey::Pubkey>,
    source_token_sa: Option<solana_pubkey::Pubkey>,
    destination_token_sa: Option<solana_pubkey::Pubkey>,
    source_token_program: Option<solana_pubkey::Pubkey>,
    destination_token_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    data: Option<SwapArgs>,
    commission_rate: Option<u16>,
    commission_direction: Option<bool>,
    order_id: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CommissionSplProxySwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn source_token_account(
        &mut self,
        source_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.source_token_account = Some(source_token_account);
        self
    }
    #[inline(always)]
    pub fn destination_token_account(
        &mut self,
        destination_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_token_account = Some(destination_token_account);
        self
    }
    #[inline(always)]
    pub fn source_mint(&mut self, source_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.source_mint = Some(source_mint);
        self
    }
    #[inline(always)]
    pub fn destination_mint(&mut self, destination_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.destination_mint = Some(destination_mint);
        self
    }
    #[inline(always)]
    pub fn commission_token_account(
        &mut self,
        commission_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.commission_token_account = Some(commission_token_account);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn sa_authority(&mut self, sa_authority: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.sa_authority = sa_authority;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn source_token_sa(&mut self, source_token_sa: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.source_token_sa = source_token_sa;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn destination_token_sa(
        &mut self,
        destination_token_sa: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.destination_token_sa = destination_token_sa;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn source_token_program(
        &mut self,
        source_token_program: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.source_token_program = source_token_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn destination_token_program(
        &mut self,
        destination_token_program: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.destination_token_program = destination_token_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.associated_token_program = associated_token_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.system_program = system_program;
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: SwapArgs) -> &mut Self {
        self.data = Some(data);
        self
    }
    #[inline(always)]
    pub fn commission_rate(&mut self, commission_rate: u16) -> &mut Self {
        self.commission_rate = Some(commission_rate);
        self
    }
    #[inline(always)]
    pub fn commission_direction(&mut self, commission_direction: bool) -> &mut Self {
        self.commission_direction = Some(commission_direction);
        self
    }
    #[inline(always)]
    pub fn order_id(&mut self, order_id: u64) -> &mut Self {
        self.order_id = Some(order_id);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CommissionSplProxySwap {
            payer: self.payer.expect("payer is not set"),
            source_token_account: self
                .source_token_account
                .expect("source_token_account is not set"),
            destination_token_account: self
                .destination_token_account
                .expect("destination_token_account is not set"),
            source_mint: self.source_mint.expect("source_mint is not set"),
            destination_mint: self.destination_mint.expect("destination_mint is not set"),
            commission_token_account: self
                .commission_token_account
                .expect("commission_token_account is not set"),
            sa_authority: self.sa_authority,
            source_token_sa: self.source_token_sa,
            destination_token_sa: self.destination_token_sa,
            source_token_program: self.source_token_program,
            destination_token_program: self.destination_token_program,
            associated_token_program: self.associated_token_program,
            system_program: self.system_program,
        };
        let args = CommissionSplProxySwapInstructionArgs {
            data: self.data.clone().expect("data is not set"),
            commission_rate: self
                .commission_rate
                .clone()
                .expect("commission_rate is not set"),
            commission_direction: self
                .commission_direction
                .clone()
                .expect("commission_direction is not set"),
            order_id: self.order_id.clone().expect("order_id is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `commission_spl_proxy_swap` CPI accounts.
pub struct CommissionSplProxySwapCpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub source_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub destination_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub source_mint: &'b solana_account_info::AccountInfo<'a>,

    pub destination_mint: &'b solana_account_info::AccountInfo<'a>,

    pub commission_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub sa_authority: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub source_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub destination_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub source_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub destination_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
}

/// `commission_spl_proxy_swap` CPI instruction.
pub struct CommissionSplProxySwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub source_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub destination_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub source_mint: &'b solana_account_info::AccountInfo<'a>,

    pub destination_mint: &'b solana_account_info::AccountInfo<'a>,

    pub commission_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub sa_authority: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub source_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub destination_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub source_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub destination_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: CommissionSplProxySwapInstructionArgs,
}

impl<'a, 'b> CommissionSplProxySwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CommissionSplProxySwapCpiAccounts<'a, 'b>,
        args: CommissionSplProxySwapInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            source_token_account: accounts.source_token_account,
            destination_token_account: accounts.destination_token_account,
            source_mint: accounts.source_mint,
            destination_mint: accounts.destination_mint,
            commission_token_account: accounts.commission_token_account,
            sa_authority: accounts.sa_authority,
            source_token_sa: accounts.source_token_sa,
            destination_token_sa: accounts.destination_token_sa,
            source_token_program: accounts.source_token_program,
            destination_token_program: accounts.destination_token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.source_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.destination_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.source_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.destination_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.commission_token_account.key,
            false,
        ));
        if let Some(sa_authority) = self.sa_authority {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *sa_authority.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(source_token_sa) = self.source_token_sa {
            accounts.push(solana_instruction::AccountMeta::new(
                *source_token_sa.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(destination_token_sa) = self.destination_token_sa {
            accounts.push(solana_instruction::AccountMeta::new(
                *destination_token_sa.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(source_token_program) = self.source_token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *source_token_program.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(destination_token_program) = self.destination_token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *destination_token_program.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(associated_token_program) = self.associated_token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *associated_token_program.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(system_program) = self.system_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *system_program.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CommissionSplProxySwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::DEX_SOLANA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.source_token_account.clone());
        account_infos.push(self.destination_token_account.clone());
        account_infos.push(self.source_mint.clone());
        account_infos.push(self.destination_mint.clone());
        account_infos.push(self.commission_token_account.clone());
        if let Some(sa_authority) = self.sa_authority {
            account_infos.push(sa_authority.clone());
        }
        if let Some(source_token_sa) = self.source_token_sa {
            account_infos.push(source_token_sa.clone());
        }
        if let Some(destination_token_sa) = self.destination_token_sa {
            account_infos.push(destination_token_sa.clone());
        }
        if let Some(source_token_program) = self.source_token_program {
            account_infos.push(source_token_program.clone());
        }
        if let Some(destination_token_program) = self.destination_token_program {
            account_infos.push(destination_token_program.clone());
        }
        if let Some(associated_token_program) = self.associated_token_program {
            account_infos.push(associated_token_program.clone());
        }
        if let Some(system_program) = self.system_program {
            account_infos.push(system_program.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CommissionSplProxySwap` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` source_token_account
///   2. `[writable]` destination_token_account
///   3. `[]` source_mint
///   4. `[]` destination_mint
///   5. `[writable]` commission_token_account
///   6. `[optional]` sa_authority
///   7. `[writable, optional]` source_token_sa
///   8. `[writable, optional]` destination_token_sa
///   9. `[optional]` source_token_program
///   10. `[optional]` destination_token_program
///   11. `[optional]` associated_token_program
///   12. `[optional]` system_program
#[derive(Clone, Debug)]
pub struct CommissionSplProxySwapCpiBuilder<'a, 'b> {
    instruction: Box<CommissionSplProxySwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CommissionSplProxySwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CommissionSplProxySwapCpiBuilderInstruction {
            __program: program,
            payer: None,
            source_token_account: None,
            destination_token_account: None,
            source_mint: None,
            destination_mint: None,
            commission_token_account: None,
            sa_authority: None,
            source_token_sa: None,
            destination_token_sa: None,
            source_token_program: None,
            destination_token_program: None,
            associated_token_program: None,
            system_program: None,
            data: None,
            commission_rate: None,
            commission_direction: None,
            order_id: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn source_token_account(
        &mut self,
        source_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_token_account = Some(source_token_account);
        self
    }
    #[inline(always)]
    pub fn destination_token_account(
        &mut self,
        destination_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_token_account = Some(destination_token_account);
        self
    }
    #[inline(always)]
    pub fn source_mint(
        &mut self,
        source_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_mint = Some(source_mint);
        self
    }
    #[inline(always)]
    pub fn destination_mint(
        &mut self,
        destination_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_mint = Some(destination_mint);
        self
    }
    #[inline(always)]
    pub fn commission_token_account(
        &mut self,
        commission_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.commission_token_account = Some(commission_token_account);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn sa_authority(
        &mut self,
        sa_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.sa_authority = sa_authority;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn source_token_sa(
        &mut self,
        source_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.source_token_sa = source_token_sa;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn destination_token_sa(
        &mut self,
        destination_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.destination_token_sa = destination_token_sa;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn source_token_program(
        &mut self,
        source_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.source_token_program = source_token_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn destination_token_program(
        &mut self,
        destination_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.destination_token_program = destination_token_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.associated_token_program = associated_token_program;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.system_program = system_program;
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: SwapArgs) -> &mut Self {
        self.instruction.data = Some(data);
        self
    }
    #[inline(always)]
    pub fn commission_rate(&mut self, commission_rate: u16) -> &mut Self {
        self.instruction.commission_rate = Some(commission_rate);
        self
    }
    #[inline(always)]
    pub fn commission_direction(&mut self, commission_direction: bool) -> &mut Self {
        self.instruction.commission_direction = Some(commission_direction);
        self
    }
    #[inline(always)]
    pub fn order_id(&mut self, order_id: u64) -> &mut Self {
        self.instruction.order_id = Some(order_id);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = CommissionSplProxySwapInstructionArgs {
            data: self.instruction.data.clone().expect("data is not set"),
            commission_rate: self
                .instruction
                .commission_rate
                .clone()
                .expect("commission_rate is not set"),
            commission_direction: self
                .instruction
                .commission_direction
                .clone()
                .expect("commission_direction is not set"),
            order_id: self
                .instruction
                .order_id
                .clone()
                .expect("order_id is not set"),
        };
        let instruction = CommissionSplProxySwapCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            source_token_account: self
                .instruction
                .source_token_account
                .expect("source_token_account is not set"),

            destination_token_account: self
                .instruction
                .destination_token_account
                .expect("destination_token_account is not set"),

            source_mint: self
                .instruction
                .source_mint
                .expect("source_mint is not set"),

            destination_mint: self
                .instruction
                .destination_mint
                .expect("destination_mint is not set"),

            commission_token_account: self
                .instruction
                .commission_token_account
                .expect("commission_token_account is not set"),

            sa_authority: self.instruction.sa_authority,

            source_token_sa: self.instruction.source_token_sa,

            destination_token_sa: self.instruction.destination_token_sa,

            source_token_program: self.instruction.source_token_program,

            destination_token_program: self.instruction.destination_token_program,

            associated_token_program: self.instruction.associated_token_program,

            system_program: self.instruction.system_program,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CommissionSplProxySwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    source_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    source_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    commission_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    sa_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    source_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_token_sa: Option<&'b solana_account_info::AccountInfo<'a>>,
    source_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    data: Option<SwapArgs>,
    commission_rate: Option<u16>,
    commission_direction: Option<bool>,
    order_id: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
