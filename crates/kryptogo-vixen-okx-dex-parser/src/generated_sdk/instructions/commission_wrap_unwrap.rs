//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const COMMISSION_WRAP_UNWRAP_DISCRIMINATOR: [u8; 8] = [12, 73, 156, 71, 233, 172, 189, 197];

/// Accounts.
#[derive(Debug)]
pub struct CommissionWrapUnwrap {
    pub payer: solana_pubkey::Pubkey,

    pub payer_wsol_account: solana_pubkey::Pubkey,

    pub wsol_mint: solana_pubkey::Pubkey,

    pub temp_wsol_account: Option<solana_pubkey::Pubkey>,

    pub commission_sol_account: solana_pubkey::Pubkey,

    pub commission_wsol_account: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl CommissionWrapUnwrap {
    pub fn instruction(
        &self,
        args: CommissionWrapUnwrapInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CommissionWrapUnwrapInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.payer_wsol_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.wsol_mint,
            false,
        ));
        if let Some(temp_wsol_account) = self.temp_wsol_account {
            accounts.push(solana_instruction::AccountMeta::new(
                temp_wsol_account,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new(
            self.commission_sol_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.commission_wsol_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CommissionWrapUnwrapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::DEX_SOLANA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CommissionWrapUnwrapInstructionData {
    discriminator: [u8; 8],
}

impl CommissionWrapUnwrapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [12, 73, 156, 71, 233, 172, 189, 197],
        }
    }
}

impl Default for CommissionWrapUnwrapInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CommissionWrapUnwrapInstructionArgs {
    pub amount_in: u64,
    pub wrap_direction: bool,
    pub commission_rate: u16,
    pub commission_direction: bool,
    pub order_id: u64,
}

/// Instruction builder for `CommissionWrapUnwrap`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` payer_wsol_account
///   2. `[optional]` wsol_mint (default to `So11111111111111111111111111111111111111112`)
///   3. `[writable, optional]` temp_wsol_account
///   4. `[writable]` commission_sol_account
///   5. `[writable]` commission_wsol_account
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct CommissionWrapUnwrapBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    payer_wsol_account: Option<solana_pubkey::Pubkey>,
    wsol_mint: Option<solana_pubkey::Pubkey>,
    temp_wsol_account: Option<solana_pubkey::Pubkey>,
    commission_sol_account: Option<solana_pubkey::Pubkey>,
    commission_wsol_account: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    amount_in: Option<u64>,
    wrap_direction: Option<bool>,
    commission_rate: Option<u16>,
    commission_direction: Option<bool>,
    order_id: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CommissionWrapUnwrapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn payer_wsol_account(&mut self, payer_wsol_account: solana_pubkey::Pubkey) -> &mut Self {
        self.payer_wsol_account = Some(payer_wsol_account);
        self
    }
    /// `[optional account, default to 'So11111111111111111111111111111111111111112']`
    #[inline(always)]
    pub fn wsol_mint(&mut self, wsol_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.wsol_mint = Some(wsol_mint);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn temp_wsol_account(
        &mut self,
        temp_wsol_account: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.temp_wsol_account = temp_wsol_account;
        self
    }
    #[inline(always)]
    pub fn commission_sol_account(
        &mut self,
        commission_sol_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.commission_sol_account = Some(commission_sol_account);
        self
    }
    #[inline(always)]
    pub fn commission_wsol_account(
        &mut self,
        commission_wsol_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.commission_wsol_account = Some(commission_wsol_account);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.amount_in = Some(amount_in);
        self
    }
    #[inline(always)]
    pub fn wrap_direction(&mut self, wrap_direction: bool) -> &mut Self {
        self.wrap_direction = Some(wrap_direction);
        self
    }
    #[inline(always)]
    pub fn commission_rate(&mut self, commission_rate: u16) -> &mut Self {
        self.commission_rate = Some(commission_rate);
        self
    }
    #[inline(always)]
    pub fn commission_direction(&mut self, commission_direction: bool) -> &mut Self {
        self.commission_direction = Some(commission_direction);
        self
    }
    #[inline(always)]
    pub fn order_id(&mut self, order_id: u64) -> &mut Self {
        self.order_id = Some(order_id);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CommissionWrapUnwrap {
            payer: self.payer.expect("payer is not set"),
            payer_wsol_account: self
                .payer_wsol_account
                .expect("payer_wsol_account is not set"),
            wsol_mint: self.wsol_mint.unwrap_or(solana_pubkey::pubkey!(
                "So11111111111111111111111111111111111111112"
            )),
            temp_wsol_account: self.temp_wsol_account,
            commission_sol_account: self
                .commission_sol_account
                .expect("commission_sol_account is not set"),
            commission_wsol_account: self
                .commission_wsol_account
                .expect("commission_wsol_account is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = CommissionWrapUnwrapInstructionArgs {
            amount_in: self.amount_in.clone().expect("amount_in is not set"),
            wrap_direction: self
                .wrap_direction
                .clone()
                .expect("wrap_direction is not set"),
            commission_rate: self
                .commission_rate
                .clone()
                .expect("commission_rate is not set"),
            commission_direction: self
                .commission_direction
                .clone()
                .expect("commission_direction is not set"),
            order_id: self.order_id.clone().expect("order_id is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `commission_wrap_unwrap` CPI accounts.
pub struct CommissionWrapUnwrapCpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub payer_wsol_account: &'b solana_account_info::AccountInfo<'a>,

    pub wsol_mint: &'b solana_account_info::AccountInfo<'a>,

    pub temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub commission_sol_account: &'b solana_account_info::AccountInfo<'a>,

    pub commission_wsol_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `commission_wrap_unwrap` CPI instruction.
pub struct CommissionWrapUnwrapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub payer_wsol_account: &'b solana_account_info::AccountInfo<'a>,

    pub wsol_mint: &'b solana_account_info::AccountInfo<'a>,

    pub temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub commission_sol_account: &'b solana_account_info::AccountInfo<'a>,

    pub commission_wsol_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CommissionWrapUnwrapInstructionArgs,
}

impl<'a, 'b> CommissionWrapUnwrapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CommissionWrapUnwrapCpiAccounts<'a, 'b>,
        args: CommissionWrapUnwrapInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            payer_wsol_account: accounts.payer_wsol_account,
            wsol_mint: accounts.wsol_mint,
            temp_wsol_account: accounts.temp_wsol_account,
            commission_sol_account: accounts.commission_sol_account,
            commission_wsol_account: accounts.commission_wsol_account,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.payer_wsol_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.wsol_mint.key,
            false,
        ));
        if let Some(temp_wsol_account) = self.temp_wsol_account {
            accounts.push(solana_instruction::AccountMeta::new(
                *temp_wsol_account.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new(
            *self.commission_sol_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.commission_wsol_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CommissionWrapUnwrapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::DEX_SOLANA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.payer_wsol_account.clone());
        account_infos.push(self.wsol_mint.clone());
        if let Some(temp_wsol_account) = self.temp_wsol_account {
            account_infos.push(temp_wsol_account.clone());
        }
        account_infos.push(self.commission_sol_account.clone());
        account_infos.push(self.commission_wsol_account.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CommissionWrapUnwrap` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` payer_wsol_account
///   2. `[]` wsol_mint
///   3. `[writable, optional]` temp_wsol_account
///   4. `[writable]` commission_sol_account
///   5. `[writable]` commission_wsol_account
///   6. `[]` system_program
///   7. `[]` token_program
#[derive(Clone, Debug)]
pub struct CommissionWrapUnwrapCpiBuilder<'a, 'b> {
    instruction: Box<CommissionWrapUnwrapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CommissionWrapUnwrapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CommissionWrapUnwrapCpiBuilderInstruction {
            __program: program,
            payer: None,
            payer_wsol_account: None,
            wsol_mint: None,
            temp_wsol_account: None,
            commission_sol_account: None,
            commission_wsol_account: None,
            system_program: None,
            token_program: None,
            amount_in: None,
            wrap_direction: None,
            commission_rate: None,
            commission_direction: None,
            order_id: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn payer_wsol_account(
        &mut self,
        payer_wsol_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payer_wsol_account = Some(payer_wsol_account);
        self
    }
    #[inline(always)]
    pub fn wsol_mint(&mut self, wsol_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.wsol_mint = Some(wsol_mint);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn temp_wsol_account(
        &mut self,
        temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.temp_wsol_account = temp_wsol_account;
        self
    }
    #[inline(always)]
    pub fn commission_sol_account(
        &mut self,
        commission_sol_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.commission_sol_account = Some(commission_sol_account);
        self
    }
    #[inline(always)]
    pub fn commission_wsol_account(
        &mut self,
        commission_wsol_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.commission_wsol_account = Some(commission_wsol_account);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.instruction.amount_in = Some(amount_in);
        self
    }
    #[inline(always)]
    pub fn wrap_direction(&mut self, wrap_direction: bool) -> &mut Self {
        self.instruction.wrap_direction = Some(wrap_direction);
        self
    }
    #[inline(always)]
    pub fn commission_rate(&mut self, commission_rate: u16) -> &mut Self {
        self.instruction.commission_rate = Some(commission_rate);
        self
    }
    #[inline(always)]
    pub fn commission_direction(&mut self, commission_direction: bool) -> &mut Self {
        self.instruction.commission_direction = Some(commission_direction);
        self
    }
    #[inline(always)]
    pub fn order_id(&mut self, order_id: u64) -> &mut Self {
        self.instruction.order_id = Some(order_id);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = CommissionWrapUnwrapInstructionArgs {
            amount_in: self
                .instruction
                .amount_in
                .clone()
                .expect("amount_in is not set"),
            wrap_direction: self
                .instruction
                .wrap_direction
                .clone()
                .expect("wrap_direction is not set"),
            commission_rate: self
                .instruction
                .commission_rate
                .clone()
                .expect("commission_rate is not set"),
            commission_direction: self
                .instruction
                .commission_direction
                .clone()
                .expect("commission_direction is not set"),
            order_id: self
                .instruction
                .order_id
                .clone()
                .expect("order_id is not set"),
        };
        let instruction = CommissionWrapUnwrapCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            payer_wsol_account: self
                .instruction
                .payer_wsol_account
                .expect("payer_wsol_account is not set"),

            wsol_mint: self.instruction.wsol_mint.expect("wsol_mint is not set"),

            temp_wsol_account: self.instruction.temp_wsol_account,

            commission_sol_account: self
                .instruction
                .commission_sol_account
                .expect("commission_sol_account is not set"),

            commission_wsol_account: self
                .instruction
                .commission_wsol_account
                .expect("commission_wsol_account is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CommissionWrapUnwrapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    wsol_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    commission_sol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    commission_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    amount_in: Option<u64>,
    wrap_direction: Option<bool>,
    commission_rate: Option<u16>,
    commission_direction: Option<bool>,
    order_id: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
