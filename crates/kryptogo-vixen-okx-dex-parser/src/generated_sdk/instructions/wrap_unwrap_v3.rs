//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const WRAP_UNWRAP_V3_DISCRIMINATOR: [u8; 8] = [180, 178, 191, 54, 70, 8, 13, 224];

/// Accounts.
#[derive(Debug)]
pub struct WrapUnwrapV3 {
    pub payer: solana_pubkey::Pubkey,

    pub payer_wsol_account: solana_pubkey::Pubkey,

    pub wsol_mint: solana_pubkey::Pubkey,

    pub temp_wsol_account: Option<solana_pubkey::Pubkey>,

    pub commission_account: Option<solana_pubkey::Pubkey>,

    pub platform_fee_account: Option<solana_pubkey::Pubkey>,
    /// Used for signing fee transfers from authority_pda (SOL) or wsol_sa (WSOL)
    pub authority_pda: Option<solana_pubkey::Pubkey>,
    /// This is the authority_pda's associated token account for WSOL
    pub wsol_sa: Option<solana_pubkey::Pubkey>,

    pub token_program: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl WrapUnwrapV3 {
    pub fn instruction(
        &self,
        args: WrapUnwrapV3InstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: WrapUnwrapV3InstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.payer_wsol_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.wsol_mint,
            false,
        ));
        if let Some(temp_wsol_account) = self.temp_wsol_account {
            accounts.push(solana_instruction::AccountMeta::new(
                temp_wsol_account,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(commission_account) = self.commission_account {
            accounts.push(solana_instruction::AccountMeta::new(
                commission_account,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(platform_fee_account) = self.platform_fee_account {
            accounts.push(solana_instruction::AccountMeta::new(
                platform_fee_account,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(authority_pda) = self.authority_pda {
            accounts.push(solana_instruction::AccountMeta::new(authority_pda, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(wsol_sa) = self.wsol_sa {
            accounts.push(solana_instruction::AccountMeta::new(wsol_sa, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&WrapUnwrapV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::DEX_SOLANA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WrapUnwrapV3InstructionData {
    discriminator: [u8; 8],
}

impl WrapUnwrapV3InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [180, 178, 191, 54, 70, 8, 13, 224],
        }
    }
}

impl Default for WrapUnwrapV3InstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WrapUnwrapV3InstructionArgs {
    pub order_id: u64,
    pub amount_in: u64,
    pub commission_info: u32,
    pub platform_fee_rate: u16,
    pub tob: bool,
}

/// Instruction builder for `WrapUnwrapV3`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` payer_wsol_account
///   2. `[optional]` wsol_mint (default to `So11111111111111111111111111111111111111112`)
///   3. `[writable, optional]` temp_wsol_account
///   4. `[writable, optional]` commission_account
///   5. `[writable, optional]` platform_fee_account
///   6. `[writable, optional]` authority_pda
///   7. `[writable, optional]` wsol_sa
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct WrapUnwrapV3Builder {
    payer: Option<solana_pubkey::Pubkey>,
    payer_wsol_account: Option<solana_pubkey::Pubkey>,
    wsol_mint: Option<solana_pubkey::Pubkey>,
    temp_wsol_account: Option<solana_pubkey::Pubkey>,
    commission_account: Option<solana_pubkey::Pubkey>,
    platform_fee_account: Option<solana_pubkey::Pubkey>,
    authority_pda: Option<solana_pubkey::Pubkey>,
    wsol_sa: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    order_id: Option<u64>,
    amount_in: Option<u64>,
    commission_info: Option<u32>,
    platform_fee_rate: Option<u16>,
    tob: Option<bool>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl WrapUnwrapV3Builder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn payer_wsol_account(&mut self, payer_wsol_account: solana_pubkey::Pubkey) -> &mut Self {
        self.payer_wsol_account = Some(payer_wsol_account);
        self
    }

    /// `[optional account, default to 'So11111111111111111111111111111111111111112']`
    #[inline(always)]
    pub fn wsol_mint(&mut self, wsol_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.wsol_mint = Some(wsol_mint);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn temp_wsol_account(
        &mut self,
        temp_wsol_account: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.temp_wsol_account = temp_wsol_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn commission_account(
        &mut self,
        commission_account: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.commission_account = commission_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn platform_fee_account(
        &mut self,
        platform_fee_account: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.platform_fee_account = platform_fee_account;
        self
    }

    /// `[optional account]`
    /// Used for signing fee transfers from authority_pda (SOL) or wsol_sa (WSOL)
    #[inline(always)]
    pub fn authority_pda(&mut self, authority_pda: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.authority_pda = authority_pda;
        self
    }

    /// `[optional account]`
    /// This is the authority_pda's associated token account for WSOL
    #[inline(always)]
    pub fn wsol_sa(&mut self, wsol_sa: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.wsol_sa = wsol_sa;
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn order_id(&mut self, order_id: u64) -> &mut Self {
        self.order_id = Some(order_id);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn commission_info(&mut self, commission_info: u32) -> &mut Self {
        self.commission_info = Some(commission_info);
        self
    }

    #[inline(always)]
    pub fn platform_fee_rate(&mut self, platform_fee_rate: u16) -> &mut Self {
        self.platform_fee_rate = Some(platform_fee_rate);
        self
    }

    #[inline(always)]
    pub fn tob(&mut self, tob: bool) -> &mut Self {
        self.tob = Some(tob);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = WrapUnwrapV3 {
            payer: self.payer.expect("payer is not set"),
            payer_wsol_account: self
                .payer_wsol_account
                .expect("payer_wsol_account is not set"),
            wsol_mint: self.wsol_mint.unwrap_or(solana_pubkey::pubkey!(
                "So11111111111111111111111111111111111111112"
            )),
            temp_wsol_account: self.temp_wsol_account,
            commission_account: self.commission_account,
            platform_fee_account: self.platform_fee_account,
            authority_pda: self.authority_pda,
            wsol_sa: self.wsol_sa,
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = WrapUnwrapV3InstructionArgs {
            order_id: self.order_id.clone().expect("order_id is not set"),
            amount_in: self.amount_in.clone().expect("amount_in is not set"),
            commission_info: self
                .commission_info
                .clone()
                .expect("commission_info is not set"),
            platform_fee_rate: self
                .platform_fee_rate
                .clone()
                .expect("platform_fee_rate is not set"),
            tob: self.tob.clone().expect("tob is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `wrap_unwrap_v3` CPI accounts.
pub struct WrapUnwrapV3CpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub payer_wsol_account: &'b solana_account_info::AccountInfo<'a>,

    pub wsol_mint: &'b solana_account_info::AccountInfo<'a>,

    pub temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub commission_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub platform_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Used for signing fee transfers from authority_pda (SOL) or wsol_sa (WSOL)
    pub authority_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// This is the authority_pda's associated token account for WSOL
    pub wsol_sa: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `wrap_unwrap_v3` CPI instruction.
pub struct WrapUnwrapV3Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub payer_wsol_account: &'b solana_account_info::AccountInfo<'a>,

    pub wsol_mint: &'b solana_account_info::AccountInfo<'a>,

    pub temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub commission_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub platform_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Used for signing fee transfers from authority_pda (SOL) or wsol_sa (WSOL)
    pub authority_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// This is the authority_pda's associated token account for WSOL
    pub wsol_sa: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: WrapUnwrapV3InstructionArgs,
}

impl<'a, 'b> WrapUnwrapV3Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: WrapUnwrapV3CpiAccounts<'a, 'b>,
        args: WrapUnwrapV3InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            payer_wsol_account: accounts.payer_wsol_account,
            wsol_mint: accounts.wsol_mint,
            temp_wsol_account: accounts.temp_wsol_account,
            commission_account: accounts.commission_account,
            platform_fee_account: accounts.platform_fee_account,
            authority_pda: accounts.authority_pda,
            wsol_sa: accounts.wsol_sa,
            token_program: accounts.token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.payer_wsol_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.wsol_mint.key,
            false,
        ));
        if let Some(temp_wsol_account) = self.temp_wsol_account {
            accounts.push(solana_instruction::AccountMeta::new(
                *temp_wsol_account.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(commission_account) = self.commission_account {
            accounts.push(solana_instruction::AccountMeta::new(
                *commission_account.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(platform_fee_account) = self.platform_fee_account {
            accounts.push(solana_instruction::AccountMeta::new(
                *platform_fee_account.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(authority_pda) = self.authority_pda {
            accounts.push(solana_instruction::AccountMeta::new(
                *authority_pda.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        if let Some(wsol_sa) = self.wsol_sa {
            accounts.push(solana_instruction::AccountMeta::new(*wsol_sa.key, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::DEX_SOLANA_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&WrapUnwrapV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::DEX_SOLANA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.payer_wsol_account.clone());
        account_infos.push(self.wsol_mint.clone());
        if let Some(temp_wsol_account) = self.temp_wsol_account {
            account_infos.push(temp_wsol_account.clone());
        }
        if let Some(commission_account) = self.commission_account {
            account_infos.push(commission_account.clone());
        }
        if let Some(platform_fee_account) = self.platform_fee_account {
            account_infos.push(platform_fee_account.clone());
        }
        if let Some(authority_pda) = self.authority_pda {
            account_infos.push(authority_pda.clone());
        }
        if let Some(wsol_sa) = self.wsol_sa {
            account_infos.push(wsol_sa.clone());
        }
        account_infos.push(self.token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `WrapUnwrapV3` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` payer_wsol_account
///   2. `[]` wsol_mint
///   3. `[writable, optional]` temp_wsol_account
///   4. `[writable, optional]` commission_account
///   5. `[writable, optional]` platform_fee_account
///   6. `[writable, optional]` authority_pda
///   7. `[writable, optional]` wsol_sa
///   8. `[]` token_program
///   9. `[]` system_program
#[derive(Clone, Debug)]
pub struct WrapUnwrapV3CpiBuilder<'a, 'b> {
    instruction: Box<WrapUnwrapV3CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WrapUnwrapV3CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WrapUnwrapV3CpiBuilderInstruction {
            __program: program,
            payer: None,
            payer_wsol_account: None,
            wsol_mint: None,
            temp_wsol_account: None,
            commission_account: None,
            platform_fee_account: None,
            authority_pda: None,
            wsol_sa: None,
            token_program: None,
            system_program: None,
            order_id: None,
            amount_in: None,
            commission_info: None,
            platform_fee_rate: None,
            tob: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn payer_wsol_account(
        &mut self,
        payer_wsol_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payer_wsol_account = Some(payer_wsol_account);
        self
    }

    #[inline(always)]
    pub fn wsol_mint(&mut self, wsol_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.wsol_mint = Some(wsol_mint);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn temp_wsol_account(
        &mut self,
        temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.temp_wsol_account = temp_wsol_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn commission_account(
        &mut self,
        commission_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.commission_account = commission_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn platform_fee_account(
        &mut self,
        platform_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.platform_fee_account = platform_fee_account;
        self
    }

    /// `[optional account]`
    /// Used for signing fee transfers from authority_pda (SOL) or wsol_sa (WSOL)
    #[inline(always)]
    pub fn authority_pda(
        &mut self,
        authority_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authority_pda = authority_pda;
        self
    }

    /// `[optional account]`
    /// This is the authority_pda's associated token account for WSOL
    #[inline(always)]
    pub fn wsol_sa(
        &mut self,
        wsol_sa: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.wsol_sa = wsol_sa;
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn order_id(&mut self, order_id: u64) -> &mut Self {
        self.instruction.order_id = Some(order_id);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.instruction.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn commission_info(&mut self, commission_info: u32) -> &mut Self {
        self.instruction.commission_info = Some(commission_info);
        self
    }

    #[inline(always)]
    pub fn platform_fee_rate(&mut self, platform_fee_rate: u16) -> &mut Self {
        self.instruction.platform_fee_rate = Some(platform_fee_rate);
        self
    }

    #[inline(always)]
    pub fn tob(&mut self, tob: bool) -> &mut Self {
        self.instruction.tob = Some(tob);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = WrapUnwrapV3InstructionArgs {
            order_id: self
                .instruction
                .order_id
                .clone()
                .expect("order_id is not set"),
            amount_in: self
                .instruction
                .amount_in
                .clone()
                .expect("amount_in is not set"),
            commission_info: self
                .instruction
                .commission_info
                .clone()
                .expect("commission_info is not set"),
            platform_fee_rate: self
                .instruction
                .platform_fee_rate
                .clone()
                .expect("platform_fee_rate is not set"),
            tob: self.instruction.tob.clone().expect("tob is not set"),
        };
        let instruction = WrapUnwrapV3Cpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            payer_wsol_account: self
                .instruction
                .payer_wsol_account
                .expect("payer_wsol_account is not set"),

            wsol_mint: self.instruction.wsol_mint.expect("wsol_mint is not set"),

            temp_wsol_account: self.instruction.temp_wsol_account,

            commission_account: self.instruction.commission_account,

            platform_fee_account: self.instruction.platform_fee_account,

            authority_pda: self.instruction.authority_pda,

            wsol_sa: self.instruction.wsol_sa,

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WrapUnwrapV3CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    wsol_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    temp_wsol_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    commission_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    platform_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
    wsol_sa: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    order_id: Option<u64>,
    amount_in: Option<u64>,
    commission_info: Option<u32>,
    platform_fee_rate: Option<u16>,
    tob: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
