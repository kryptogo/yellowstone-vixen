//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum DexSolanaError {
    /// 6000 - Too many hops
    #[error("Too many hops")]
    TooManyHops = 0x1770,
    /// 6001 - Min return not reached
    #[error("Min return not reached")]
    MinReturnNotReached = 0x1771,
    /// 6002 - amount_in must be greater than 0
    #[error("amount_in must be greater than 0")]
    AmountInMustBeGreaterThanZero = 0x1772,
    /// 6003 - min_return must be greater than 0
    #[error("min_return must be greater than 0")]
    MinReturnMustBeGreaterThanZero = 0x1773,
    /// 6004 - invalid expect amount out
    #[error("invalid expect amount out")]
    InvalidExpectAmountOut = 0x1774,
    /// 6005 - amounts and routes must have the same length
    #[error("amounts and routes must have the same length")]
    AmountsAndRoutesMustHaveTheSameLength = 0x1775,
    /// 6006 - total_amounts must be equal to amount_in
    #[error("total_amounts must be equal to amount_in")]
    TotalAmountsMustBeEqualToAmountIn = 0x1776,
    /// 6007 - dexes and weights must have the same length
    #[error("dexes and weights must have the same length")]
    DexesAndWeightsMustHaveTheSameLength = 0x1777,
    /// 6008 - weights must sum to 100
    #[error("weights must sum to 100")]
    WeightsMustSumTo100 = 0x1778,
    /// 6009 - Invalid source token account
    #[error("Invalid source token account")]
    InvalidSourceTokenAccount = 0x1779,
    /// 6010 - Invalid destination token account
    #[error("Invalid destination token account")]
    InvalidDestinationTokenAccount = 0x177A,
    /// 6011 - Invalid token account
    #[error("Invalid token account")]
    InvalidTokenAccount = 0x177B,
    /// 6012 - Invalid commission rate
    #[error("Invalid commission rate")]
    InvalidCommissionRate = 0x177C,
    /// 6013 - Invalid trim rate
    #[error("Invalid trim rate")]
    InvalidTrimRate = 0x177D,
    /// 6014 - Invalid commission token account
    #[error("Invalid commission token account")]
    InvalidCommissionTokenAccount = 0x177E,
    /// 6015 - Invalid commission temporary token account
    #[error("Invalid commission temporary token account")]
    InvalidCommissionTemporaryTokenAccount = 0x177F,
    /// 6016 - Invalid accounts length
    #[error("Invalid accounts length")]
    InvalidAccountsLength = 0x1780,
    /// 6017 - Invalid hop accounts
    #[error("Invalid hop accounts")]
    InvalidHopAccounts = 0x1781,
    /// 6018 - Invalid hop from account
    #[error("Invalid hop from account")]
    InvalidHopFromAccount = 0x1782,
    /// 6019 - Swap authority is not signer
    #[error("Swap authority is not signer")]
    SwapAuthorityIsNotSigner = 0x1783,
    /// 6020 - Invalid authority pda
    #[error("Invalid authority pda")]
    InvalidAuthorityPda = 0x1784,
    /// 6021 - Invalid swap authority
    #[error("Invalid swap authority")]
    InvalidSwapAuthority = 0x1785,
    /// 6022 - Invalid program id
    #[error("Invalid program id")]
    InvalidProgramId = 0x1786,
    /// 6023 - Invalid pool
    #[error("Invalid pool")]
    InvalidPool = 0x1787,
    /// 6024 - Invalid token mint
    #[error("Invalid token mint")]
    InvalidTokenMint = 0x1788,
    /// 6025 - Calculation error
    #[error("Calculation error")]
    CalculationError = 0x1789,
    /// 6026 - Invalid sanctum lst state list data
    #[error("Invalid sanctum lst state list data")]
    InvalidSanctumLstStateListData = 0x178A,
    /// 6027 - Invalid sanctum lst state list index
    #[error("Invalid sanctum lst state list index")]
    InvalidSanctumLstStateListIndex = 0x178B,
    /// 6028 - Invalid sanctum swap accounts
    #[error("Invalid sanctum swap accounts")]
    InvalidSanctumSwapAccounts = 0x178C,
    /// 6029 - Invalid swap authority account
    #[error("Invalid swap authority account")]
    InvalidSwapAuthorityAccounts = 0x178D,
    /// 6030 - Bridge Seed Error
    #[error("Bridge Seed Error")]
    InvalidBridgeSeed = 0x178E,
    /// 6031 - Invalid accounts and instruction length
    #[error("Invalid accounts and instruction length")]
    InvalidBundleInput = 0x178F,
    /// 6032 - SA is required
    #[error("SA is required")]
    MissingSaAccount = 0x1790,
    /// 6033 - Invalid platform fee rate
    #[error("Invalid platform fee rate")]
    InvalidPlatformFeeRate = 0x1791,
    /// 6034 - Amount out must be greater than 0
    #[error("Amount out must be greater than 0")]
    AmountOutMustBeGreaterThanZero = 0x1792,
    /// 6035 - Invalid DampingTerm
    #[error("Invalid DampingTerm")]
    InvalidDampingTerm = 0x1793,
    /// 6036 - Invalid mint
    #[error("Invalid mint")]
    InvalidMint = 0x1794,
    /// 6037 - Invalid platform fee amount
    #[error("Invalid platform fee amount")]
    InvalidPlatformFeeAmount = 0x1795,
    /// 6038 - Invalid fee token account
    #[error("Invalid fee token account")]
    InvalidFeeTokenAccount = 0x1796,
    /// 6039 - Invalid sa authority
    #[error("Invalid sa authority")]
    InvalidSaAuthority = 0x1797,
    /// 6040 - Commission account is none
    #[error("Commission account is none")]
    CommissionAccountIsNone = 0x1798,
    /// 6041 - Platform fee account is none
    #[error("Platform fee account is none")]
    PlatformFeeAccountIsNone = 0x1799,
    /// 6042 - Trim account is none
    #[error("Trim account is none")]
    TrimAccountIsNone = 0x179A,
    /// 6043 - Invalid fee account
    #[error("Invalid fee account")]
    InvalidFeeAccount = 0x179B,
    /// 6044 - Invalid source token sa
    #[error("Invalid source token sa")]
    InvalidSourceTokenSa = 0x179C,
    /// 6045 - Sa authority is none
    #[error("Sa authority is none")]
    SaAuthorityIsNone = 0x179D,
    /// 6046 - Source token sa is none
    #[error("Source token sa is none")]
    SourceTokenSaIsNone = 0x179E,
    /// 6047 - Source token program is none
    #[error("Source token program is none")]
    SourceTokenProgramIsNone = 0x179F,
    /// 6048 - Destination token sa is none
    #[error("Destination token sa is none")]
    DestinationTokenSaIsNone = 0x17A0,
    /// 6049 - Destination token program is none
    #[error("Destination token program is none")]
    DestinationTokenProgramIsNone = 0x17A1,
    /// 6050 - Calculation result must be greater than zero
    #[error("Calculation result must be greater than zero")]
    ResultMustBeGreaterThanZero = 0x17A2,
    /// 6051 - Invalid account data
    #[error("Invalid account data")]
    InvalidAccountData = 0x17A3,
    /// 6052 - Invalid RFQ parameters
    #[error("Invalid RFQ parameters")]
    InvalidRfqParameters = 0x17A4,
    /// 6053 - TOB mode requires authority PDA
    #[error("TOB mode requires authority PDA")]
    TobAuthorityPdaRequired = 0x17A5,
    /// 6054 - TOB mode with WSOL fees requires wsol_sa account
    #[error("TOB mode with WSOL fees requires wsol_sa account")]
    TobWsolSaRequired = 0x17A6,
    /// 6055 - Invalid WSOL SA account
    #[error("Invalid WSOL SA account")]
    InvalidWsolSa = 0x17A7,
    /// 6056 - Invalid trim account
    #[error("Invalid trim account")]
    InvalidTrimAccount = 0x17A8,
    /// 6057 - Invalid commission account
    #[error("Invalid commission account")]
    InvalidCommissionAccount = 0x17A9,
    /// 6058 - Invalid platform fee account
    #[error("Invalid platform fee account")]
    InvalidPlatformFeeAccount = 0x17AA,
    /// 6059 - Invalid actual amount in
    #[error("Invalid actual amount in")]
    InvalidActualAmountIn = 0x17AB,
    /// 6060 - Unexpected SA token account in CPI
    #[error("Unexpected SA token account in CPI")]
    UnexpectedSaTokenAccount = 0x17AC,
    /// 6061 - Invalid source token sa mint
    #[error("Invalid source token sa mint")]
    InvalidSourceTokenSaMint = 0x17AD,
    /// 6062 - Invalid destination token sa mint
    #[error("Invalid destination token sa mint")]
    InvalidDestinationTokenSaMint = 0x17AE,
    /// 6063 - Adapter abort
    #[error("Adapter abort")]
    AdapterAbort = 0x17AF,
    /// 6064 - Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds = 0x17B0,
    /// 6065 - Invalid diff lamports
    #[error("Invalid diff lamports")]
    InvalidDiffLamports = 0x17B1,
    /// 6066 - Invalid token program
    #[error("Invalid token program")]
    InvalidTokenProgram = 0x17B2,
    /// 6067 - Invalid signer
    #[error("Invalid signer")]
    InvalidSigner = 0x17B3,
    /// 6068 - Invalid associated token program
    #[error("Invalid associated token program")]
    InvalidAssociatedTokenProgram = 0x17B4,
    /// 6069 - SOL receiver must be a system account
    #[error("SOL receiver must be a system account")]
    SolReceiverMustBeSystemAccount = 0x17B5,
    /// 6070 - Insufficient balance for transfer
    #[error("Insufficient balance for transfer")]
    InsufficientBalance = 0x17B6,
    /// 6071 - SOL receiver requires acc_close_flag to be true
    #[error("SOL receiver requires acc_close_flag to be true")]
    SolReceiverRequiresAccCloseFlag = 0x17B7,
    /// 6072 - Destination must be wSOL when sol_receiver is specified
    #[error("Destination must be wSOL when sol_receiver is specified")]
    DestinationMustBeWsolForSolReceiver = 0x17B8,
    /// 6073 - Invalid Goonfi parameters
    #[error("Invalid Goonfi parameters")]
    InvalidGoonfiParameters = 0x17B9,
}

impl From<DexSolanaError> for solana_program_error::ProgramError {
    fn from(e: DexSolanaError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
