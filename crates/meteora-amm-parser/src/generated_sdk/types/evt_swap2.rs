//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_pubkey::Pubkey;

use crate::generated::types::{SwapParameters2, SwapResult2};

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct EvtSwap2 {
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    pub trade_direction: u8,
    pub collect_fee_mode: u8,
    pub has_referral: bool,
    pub params: SwapParameters2,
    pub swap_result: SwapResult2,
    pub included_transfer_fee_amount_in: u64,
    pub included_transfer_fee_amount_out: u64,
    pub excluded_transfer_fee_amount_out: u64,
    pub current_timestamp: u64,
    pub reserve_a_amount: u64,
    pub reserve_b_amount: u64,
}

impl EvtSwap2 {
    /// EvtSwap2 discriminator bytes
    pub const DISCRIMINATOR: [u8; 8] = [0xbd, 0x42, 0x33, 0xa8, 0x26, 0x50, 0x75, 0x99];

    /// Parse EvtSwap2 from inner instruction data that starts with self CPI log prefix
    pub fn from_inner_instruction_data(data: &[u8]) -> Option<Self> {
        // Check if data starts with self CPI log prefix: 0xe445a52e51cb9a1d
        let cpi_log_prefix = [0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d];
        if !data.starts_with(&cpi_log_prefix) {
            return None;
        }

        // Skip the CPI log prefix (8 bytes)
        let remaining_data = &data[8..];

        // Check if the remaining data starts with EvtSwap2 discriminator
        if !remaining_data.starts_with(&Self::DISCRIMINATOR) {
            return None;
        }

        // Skip the discriminator (8 bytes) and deserialize the EvtSwap2
        Self::try_from_slice(&remaining_data[8..]).ok()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_discriminator_constant() {
        assert_eq!(EvtSwap2::DISCRIMINATOR, [
            0xbd, 0x42, 0x33, 0xa8, 0x26, 0x50, 0x75, 0x99
        ]);
    }

    #[test]
    fn test_cpi_log_prefix_detection() {
        let cpi_log_prefix = [0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d];
        let evt_swap2_discriminator = [0xbd, 0x42, 0x33, 0xa8, 0x26, 0x50, 0x75, 0x99];

        // Create test data with CPI log prefix + EvtSwap2 discriminator + mock data
        let mut test_data = Vec::new();
        test_data.extend_from_slice(&cpi_log_prefix);
        test_data.extend_from_slice(&evt_swap2_discriminator);
        test_data.extend_from_slice(&[0u8; 128]); // Mock EvtSwap2 data

        // Should detect the CPI log prefix
        assert!(test_data.starts_with(&cpi_log_prefix));

        // Should detect the EvtSwap2 discriminator after CPI prefix
        assert!(test_data[8..].starts_with(&evt_swap2_discriminator));
    }

    #[test]
    fn test_invalid_cpi_log_prefix() {
        let invalid_prefix = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        let evt_swap2_discriminator = [0xbd, 0x42, 0x33, 0xa8, 0x26, 0x50, 0x75, 0x99];

        let mut test_data = Vec::new();
        test_data.extend_from_slice(&invalid_prefix);
        test_data.extend_from_slice(&evt_swap2_discriminator);
        test_data.extend_from_slice(&[0u8; 128]);

        let result = EvtSwap2::from_inner_instruction_data(&test_data);
        assert!(
            result.is_none(),
            "Should not parse with invalid CPI log prefix"
        );
    }

    #[test]
    fn test_parse_real_inner_instruction_data() {
        // Real inner instruction data from a meteora AMM swap2 transaction
        let hex_data = "e445a52e51cb9a1dbd4233a8265075992178a7f4ef4f7f57f6b08f5ac41c5d814615ff6b4dc6b8c8cd44c3216b55fb0f0000008f69f12e0b0000000000000000000000008f69f12e0b0000008f69f12e0b0000000000000000000000a62ad70000000000e72810070e1b630400000000000000000b74000000000000021d000000000000000000000000000000000000000000008f69f12e0b000000a62ad70000000000a62ad7000000000087a0e868000000000637cad152130000040eeb7301000000";

        // Convert hex string to bytes
        let data: Vec<u8> = (0..hex_data.len())
            .step_by(2)
            .map(|i| u8::from_str_radix(&hex_data[i..i + 2], 16).unwrap())
            .collect();

        let result = EvtSwap2::from_inner_instruction_data(&data);
        assert!(
            result.is_some(),
            "Should successfully parse real inner instruction data"
        );

        let evt_swap2 = result.unwrap();

        // Verify the parsing worked by checking some fields
        assert_eq!(evt_swap2.trade_direction, 0);
        assert_eq!(evt_swap2.collect_fee_mode, 0);
        assert!(!evt_swap2.has_referral);

        // Verify amount_in and amount_out
        assert_eq!(evt_swap2.params.amount0, 48032213391); // amount_in
        assert_eq!(evt_swap2.swap_result.output_amount, 14101158); // amount_out
    }
}
