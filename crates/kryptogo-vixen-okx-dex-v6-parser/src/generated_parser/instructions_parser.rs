//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

#[cfg(feature = "shared-data")]
use std::sync::Arc;

#[cfg(feature = "shared-data")]
use yellowstone_vixen_core::InstructionUpdateOutput;

use crate::{
    deserialize_checked,
    instructions::{
        Claim as ClaimIxAccounts, CreateTokenAccount as CreateTokenAccountIxAccounts,
        CreateTokenAccountInstructionArgs as CreateTokenAccountIxData,
        CreateTokenAccountWithSeed as CreateTokenAccountWithSeedIxAccounts,
        CreateTokenAccountWithSeedInstructionArgs as CreateTokenAccountWithSeedIxData,
        ProxySwap as ProxySwapIxAccounts, ProxySwapInstructionArgs as ProxySwapIxData,
        Swap as SwapIxAccounts, SwapInstructionArgs as SwapIxData, SwapTob as SwapTobIxAccounts,
        SwapTobInstructionArgs as SwapTobIxData,
        SwapTobWithReceiver as SwapTobWithReceiverIxAccounts,
        SwapTobWithReceiverInstructionArgs as SwapTobWithReceiverIxData,
        SwapToc as SwapTocIxAccounts, SwapTocInstructionArgs as SwapTocIxData,
        WrapUnwrap as WrapUnwrapIxAccounts, WrapUnwrapInstructionArgs as WrapUnwrapIxData,
    },
    ID,
};

/// DexSolanaV2 Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum DexSolanaV2ProgramIx {
    Claim(ClaimIxAccounts),
    CreateTokenAccount(CreateTokenAccountIxAccounts, CreateTokenAccountIxData),
    CreateTokenAccountWithSeed(
        CreateTokenAccountWithSeedIxAccounts,
        CreateTokenAccountWithSeedIxData,
    ),
    ProxySwap(ProxySwapIxAccounts, ProxySwapIxData),
    Swap(SwapIxAccounts, SwapIxData),
    SwapTob(SwapTobIxAccounts, SwapTobIxData),
    SwapTobWithReceiver(SwapTobWithReceiverIxAccounts, SwapTobWithReceiverIxData),
    SwapToc(SwapTocIxAccounts, SwapTocIxData),
    WrapUnwrap(WrapUnwrapIxAccounts, WrapUnwrapIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    #[cfg(not(feature = "shared-data"))]
    type Output = DexSolanaV2ProgramIx;
    #[cfg(feature = "shared-data")]
    type Output = InstructionUpdateOutput<DexSolanaV2ProgramIx>;

    fn id(&self) -> std::borrow::Cow<'static, str> { "DexSolanaV2::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            let res = InstructionParser::parse_impl(ix_update);

            #[cfg(feature = "tracing")]
            if let Err(e) = &res {
                let ix_discriminator: [u8; 8] = ix_update.data[0..8].try_into()?;

                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "deserialization_error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            }

            res
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<<Self as yellowstone_vixen_core::Parser>::Output> {
        let accounts_len = ix.accounts.len();
        let accounts = &mut ix.accounts.iter();

        #[cfg(feature = "shared-data")]
        let shared_data = Arc::clone(&ix.shared);

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [62, 198, 214, 193, 213, 159, 108, 210] => {
                let expected_accounts_len = 9;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = ClaimIxAccounts {
                    signer: next_account(accounts)?,
                    receiver: next_account(accounts)?,
                    source_token_account: next_program_id_optional_account(accounts)?,
                    destination_token_account: next_program_id_optional_account(accounts)?,
                    sa_authority: next_account(accounts)?,
                    token_mint: next_program_id_optional_account(accounts)?,
                    token_program: next_program_id_optional_account(accounts)?,
                    system_program: next_account(accounts)?,
                    associated_token_program: next_program_id_optional_account(accounts)?,
                };
                Ok(DexSolanaV2ProgramIx::Claim(ix_accounts))
            },
            [147, 241, 123, 100, 244, 132, 174, 118] => {
                let expected_accounts_len = 6;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CreateTokenAccountIxAccounts {
                    payer: next_account(accounts)?,
                    owner: next_account(accounts)?,
                    token_account: next_account(accounts)?,
                    token_mint: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                };
                let de_ix_data: CreateTokenAccountIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::CreateTokenAccount(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [125, 191, 239, 140, 66, 8, 9, 228] => {
                let expected_accounts_len = 6;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CreateTokenAccountWithSeedIxAccounts {
                    payer: next_account(accounts)?,
                    owner: next_account(accounts)?,
                    token_account: next_account(accounts)?,
                    token_mint: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                };
                let de_ix_data: CreateTokenAccountWithSeedIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::CreateTokenAccountWithSeed(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [19, 44, 130, 148, 72, 56, 44, 238] => {
                let expected_accounts_len = 14;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = ProxySwapIxAccounts {
                    payer: next_account(accounts)?,
                    source_token_account: next_account(accounts)?,
                    destination_token_account: next_account(accounts)?,
                    source_mint: next_account(accounts)?,
                    destination_mint: next_account(accounts)?,
                    sa_authority: next_program_id_optional_account(accounts)?,
                    source_token_sa: next_program_id_optional_account(accounts)?,
                    destination_token_sa: next_program_id_optional_account(accounts)?,
                    source_token_program: next_program_id_optional_account(accounts)?,
                    destination_token_program: next_program_id_optional_account(accounts)?,
                    associated_token_program: next_program_id_optional_account(accounts)?,
                    system_program: next_program_id_optional_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: ProxySwapIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::ProxySwap(ix_accounts, de_ix_data))
            },
            [248, 198, 158, 145, 225, 117, 135, 200] => {
                let expected_accounts_len = 7;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = SwapIxAccounts {
                    payer: next_account(accounts)?,
                    source_token_account: next_account(accounts)?,
                    destination_token_account: next_account(accounts)?,
                    source_mint: next_account(accounts)?,
                    destination_mint: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: SwapIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::Swap(ix_accounts, de_ix_data))
            },
            [170, 41, 85, 177, 132, 80, 31, 53] => {
                let expected_accounts_len = 16;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = SwapTobIxAccounts {
                    payer: next_account(accounts)?,
                    source_token_account: next_account(accounts)?,
                    destination_token_account: next_account(accounts)?,
                    source_mint: next_account(accounts)?,
                    destination_mint: next_account(accounts)?,
                    commission_account: next_program_id_optional_account(accounts)?,
                    platform_fee_account: next_program_id_optional_account(accounts)?,
                    sa_authority: next_program_id_optional_account(accounts)?,
                    source_token_sa: next_program_id_optional_account(accounts)?,
                    destination_token_sa: next_program_id_optional_account(accounts)?,
                    source_token_program: next_program_id_optional_account(accounts)?,
                    destination_token_program: next_program_id_optional_account(accounts)?,
                    associated_token_program: next_program_id_optional_account(accounts)?,
                    system_program: next_program_id_optional_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: SwapTobIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::SwapTob(ix_accounts, de_ix_data))
            },
            [223, 170, 216, 234, 204, 6, 241, 25] => {
                let expected_accounts_len = 17;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = SwapTobWithReceiverIxAccounts {
                    payer: next_account(accounts)?,
                    source_token_account: next_account(accounts)?,
                    destination_token_account: next_account(accounts)?,
                    source_mint: next_account(accounts)?,
                    destination_mint: next_account(accounts)?,
                    commission_account: next_program_id_optional_account(accounts)?,
                    platform_fee_account: next_program_id_optional_account(accounts)?,
                    sa_authority: next_program_id_optional_account(accounts)?,
                    source_token_sa: next_program_id_optional_account(accounts)?,
                    destination_token_sa: next_program_id_optional_account(accounts)?,
                    source_token_program: next_program_id_optional_account(accounts)?,
                    destination_token_program: next_program_id_optional_account(accounts)?,
                    associated_token_program: next_program_id_optional_account(accounts)?,
                    system_program: next_program_id_optional_account(accounts)?,
                    sol_receiver: next_program_id_optional_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: SwapTobWithReceiverIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::SwapTobWithReceiver(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [187, 201, 212, 51, 16, 155, 236, 60] => {
                let expected_accounts_len = 16;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = SwapTocIxAccounts {
                    payer: next_account(accounts)?,
                    source_token_account: next_account(accounts)?,
                    destination_token_account: next_account(accounts)?,
                    source_mint: next_account(accounts)?,
                    destination_mint: next_account(accounts)?,
                    commission_account: next_program_id_optional_account(accounts)?,
                    platform_fee_account: next_program_id_optional_account(accounts)?,
                    sa_authority: next_program_id_optional_account(accounts)?,
                    source_token_sa: next_program_id_optional_account(accounts)?,
                    destination_token_sa: next_program_id_optional_account(accounts)?,
                    source_token_program: next_program_id_optional_account(accounts)?,
                    destination_token_program: next_program_id_optional_account(accounts)?,
                    associated_token_program: next_program_id_optional_account(accounts)?,
                    system_program: next_program_id_optional_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: SwapTocIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::SwapToc(ix_accounts, de_ix_data))
            },
            [220, 101, 139, 249, 41, 190, 118, 199] => {
                let expected_accounts_len = 12;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = WrapUnwrapIxAccounts {
                    payer: next_account(accounts)?,
                    payer_wsol_account: next_account(accounts)?,
                    wsol_mint: next_account(accounts)?,
                    temp_wsol_account: next_program_id_optional_account(accounts)?,
                    commission_account: next_program_id_optional_account(accounts)?,
                    platform_fee_account: next_program_id_optional_account(accounts)?,
                    authority_pda: next_program_id_optional_account(accounts)?,
                    wsol_sa: next_program_id_optional_account(accounts)?,
                    token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: WrapUnwrapIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(DexSolanaV2ProgramIx::WrapUnwrap(ix_accounts, de_ix_data))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        #[cfg(not(feature = "shared-data"))]
        return ix;

        #[cfg(feature = "shared-data")]
        ix.map(|ix| InstructionUpdateOutput {
            parsed_ix: ix,
            shared_data,
        })
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

fn next_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
) -> Result<solana_pubkey::Pubkey, yellowstone_vixen_core::ParseError> {
    accounts
        .next()
        .ok_or(yellowstone_vixen_core::ParseError::from(
            "No more accounts to parse",
        ))
        .map(|acc| acc.0.into())
}

/// Gets the next optional account using the ommited account strategy (account is not passed at all at the instruction).
/// ### Be careful to use this function when more than one account is optional in the Instruction.
///  Only by order there is no way to which ones of the optional accounts are present.
pub fn next_optional_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
    actual_accounts_len: usize,
    expected_accounts_len: &mut usize,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    if actual_accounts_len == *expected_accounts_len + 1 {
        *expected_accounts_len += 1;
        Ok(Some(next_account(accounts)?))
    } else {
        Ok(None)
    }
}

/// Gets the next optional account using the traditional Program ID strategy.
///  (If account key is the program ID, means account is not present)
pub fn next_program_id_optional_account<
    'a,
    T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>,
>(
    accounts: &mut T,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    let account_key = next_account(accounts)?;
    if account_key.eq(&ID) {
        Ok(None)
    } else {
        Ok(Some(account_key))
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{ClaimIxAccounts, DexSolanaV2ProgramIx, InstructionParser};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::ClaimIxAccounts> for ClaimIxAccounts {
        fn into_proto(self) -> proto_def::ClaimIxAccounts {
            proto_def::ClaimIxAccounts {
                signer: self.signer.to_string(),
                receiver: self.receiver.to_string(),
                source_token_account: self.source_token_account.map(|p| p.to_string()),
                destination_token_account: self.destination_token_account.map(|p| p.to_string()),
                sa_authority: self.sa_authority.to_string(),
                token_mint: self.token_mint.map(|p| p.to_string()),
                token_program: self.token_program.map(|p| p.to_string()),
                system_program: self.system_program.to_string(),
                associated_token_program: self.associated_token_program.map(|p| p.to_string()),
            }
        }
    }
    use super::CreateTokenAccountIxAccounts;
    impl IntoProto<proto_def::CreateTokenAccountIxAccounts> for CreateTokenAccountIxAccounts {
        fn into_proto(self) -> proto_def::CreateTokenAccountIxAccounts {
            proto_def::CreateTokenAccountIxAccounts {
                payer: self.payer.to_string(),
                owner: self.owner.to_string(),
                token_account: self.token_account.to_string(),
                token_mint: self.token_mint.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateTokenAccountIxData;
    impl IntoProto<proto_def::CreateTokenAccountIxData> for CreateTokenAccountIxData {
        fn into_proto(self) -> proto_def::CreateTokenAccountIxData {
            proto_def::CreateTokenAccountIxData {
                bump: self.bump.into(),
            }
        }
    }
    use super::CreateTokenAccountWithSeedIxAccounts;
    impl IntoProto<proto_def::CreateTokenAccountWithSeedIxAccounts>
        for CreateTokenAccountWithSeedIxAccounts
    {
        fn into_proto(self) -> proto_def::CreateTokenAccountWithSeedIxAccounts {
            proto_def::CreateTokenAccountWithSeedIxAccounts {
                payer: self.payer.to_string(),
                owner: self.owner.to_string(),
                token_account: self.token_account.to_string(),
                token_mint: self.token_mint.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateTokenAccountWithSeedIxData;
    impl IntoProto<proto_def::CreateTokenAccountWithSeedIxData> for CreateTokenAccountWithSeedIxData {
        fn into_proto(self) -> proto_def::CreateTokenAccountWithSeedIxData {
            proto_def::CreateTokenAccountWithSeedIxData {
                bump: self.bump.into(),
                seed: self.seed,
            }
        }
    }
    use super::ProxySwapIxAccounts;
    impl IntoProto<proto_def::ProxySwapIxAccounts> for ProxySwapIxAccounts {
        fn into_proto(self) -> proto_def::ProxySwapIxAccounts {
            proto_def::ProxySwapIxAccounts {
                payer: self.payer.to_string(),
                source_token_account: self.source_token_account.to_string(),
                destination_token_account: self.destination_token_account.to_string(),
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                sa_authority: self.sa_authority.map(|p| p.to_string()),
                source_token_sa: self.source_token_sa.map(|p| p.to_string()),
                destination_token_sa: self.destination_token_sa.map(|p| p.to_string()),
                source_token_program: self.source_token_program.map(|p| p.to_string()),
                destination_token_program: self.destination_token_program.map(|p| p.to_string()),
                associated_token_program: self.associated_token_program.map(|p| p.to_string()),
                system_program: self.system_program.map(|p| p.to_string()),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ProxySwapIxData;
    impl IntoProto<proto_def::ProxySwapIxData> for ProxySwapIxData {
        fn into_proto(self) -> proto_def::ProxySwapIxData {
            proto_def::ProxySwapIxData {
                args: Some(self.args.into_proto()),
            }
        }
    }
    use super::SwapIxAccounts;
    impl IntoProto<proto_def::SwapIxAccounts> for SwapIxAccounts {
        fn into_proto(self) -> proto_def::SwapIxAccounts {
            proto_def::SwapIxAccounts {
                payer: self.payer.to_string(),
                source_token_account: self.source_token_account.to_string(),
                destination_token_account: self.destination_token_account.to_string(),
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapIxData;
    impl IntoProto<proto_def::SwapIxData> for SwapIxData {
        fn into_proto(self) -> proto_def::SwapIxData {
            proto_def::SwapIxData {
                args: Some(self.args.into_proto()),
            }
        }
    }
    use super::SwapTobIxAccounts;
    impl IntoProto<proto_def::SwapTobIxAccounts> for SwapTobIxAccounts {
        fn into_proto(self) -> proto_def::SwapTobIxAccounts {
            proto_def::SwapTobIxAccounts {
                payer: self.payer.to_string(),
                source_token_account: self.source_token_account.to_string(),
                destination_token_account: self.destination_token_account.to_string(),
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                commission_account: self.commission_account.map(|p| p.to_string()),
                platform_fee_account: self.platform_fee_account.map(|p| p.to_string()),
                sa_authority: self.sa_authority.map(|p| p.to_string()),
                source_token_sa: self.source_token_sa.map(|p| p.to_string()),
                destination_token_sa: self.destination_token_sa.map(|p| p.to_string()),
                source_token_program: self.source_token_program.map(|p| p.to_string()),
                destination_token_program: self.destination_token_program.map(|p| p.to_string()),
                associated_token_program: self.associated_token_program.map(|p| p.to_string()),
                system_program: self.system_program.map(|p| p.to_string()),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapTobIxData;
    impl IntoProto<proto_def::SwapTobIxData> for SwapTobIxData {
        fn into_proto(self) -> proto_def::SwapTobIxData {
            proto_def::SwapTobIxData {
                args: Some(self.args.into_proto()),
                commission_info: self.commission_info,
                platform_fee_rate: self.platform_fee_rate.into(),
                trim_rate: self.trim_rate.into(),
            }
        }
    }
    use super::SwapTobWithReceiverIxAccounts;
    impl IntoProto<proto_def::SwapTobWithReceiverIxAccounts> for SwapTobWithReceiverIxAccounts {
        fn into_proto(self) -> proto_def::SwapTobWithReceiverIxAccounts {
            proto_def::SwapTobWithReceiverIxAccounts {
                payer: self.payer.to_string(),
                source_token_account: self.source_token_account.to_string(),
                destination_token_account: self.destination_token_account.to_string(),
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                commission_account: self.commission_account.map(|p| p.to_string()),
                platform_fee_account: self.platform_fee_account.map(|p| p.to_string()),
                sa_authority: self.sa_authority.map(|p| p.to_string()),
                source_token_sa: self.source_token_sa.map(|p| p.to_string()),
                destination_token_sa: self.destination_token_sa.map(|p| p.to_string()),
                source_token_program: self.source_token_program.map(|p| p.to_string()),
                destination_token_program: self.destination_token_program.map(|p| p.to_string()),
                associated_token_program: self.associated_token_program.map(|p| p.to_string()),
                system_program: self.system_program.map(|p| p.to_string()),
                sol_receiver: self.sol_receiver.map(|p| p.to_string()),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapTobWithReceiverIxData;
    impl IntoProto<proto_def::SwapTobWithReceiverIxData> for SwapTobWithReceiverIxData {
        fn into_proto(self) -> proto_def::SwapTobWithReceiverIxData {
            proto_def::SwapTobWithReceiverIxData {
                args: Some(self.args.into_proto()),
                commission_info: self.commission_info,
                platform_fee_rate: self.platform_fee_rate.into(),
                trim_rate: self.trim_rate.into(),
            }
        }
    }
    use super::SwapTocIxAccounts;
    impl IntoProto<proto_def::SwapTocIxAccounts> for SwapTocIxAccounts {
        fn into_proto(self) -> proto_def::SwapTocIxAccounts {
            proto_def::SwapTocIxAccounts {
                payer: self.payer.to_string(),
                source_token_account: self.source_token_account.to_string(),
                destination_token_account: self.destination_token_account.to_string(),
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                commission_account: self.commission_account.map(|p| p.to_string()),
                platform_fee_account: self.platform_fee_account.map(|p| p.to_string()),
                sa_authority: self.sa_authority.map(|p| p.to_string()),
                source_token_sa: self.source_token_sa.map(|p| p.to_string()),
                destination_token_sa: self.destination_token_sa.map(|p| p.to_string()),
                source_token_program: self.source_token_program.map(|p| p.to_string()),
                destination_token_program: self.destination_token_program.map(|p| p.to_string()),
                associated_token_program: self.associated_token_program.map(|p| p.to_string()),
                system_program: self.system_program.map(|p| p.to_string()),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapTocIxData;
    impl IntoProto<proto_def::SwapTocIxData> for SwapTocIxData {
        fn into_proto(self) -> proto_def::SwapTocIxData {
            proto_def::SwapTocIxData {
                args: Some(self.args.into_proto()),
                commission_info: self.commission_info,
                platform_fee_rate: self.platform_fee_rate.into(),
            }
        }
    }
    use super::WrapUnwrapIxAccounts;
    impl IntoProto<proto_def::WrapUnwrapIxAccounts> for WrapUnwrapIxAccounts {
        fn into_proto(self) -> proto_def::WrapUnwrapIxAccounts {
            proto_def::WrapUnwrapIxAccounts {
                payer: self.payer.to_string(),
                payer_wsol_account: self.payer_wsol_account.to_string(),
                wsol_mint: self.wsol_mint.to_string(),
                temp_wsol_account: self.temp_wsol_account.map(|p| p.to_string()),
                commission_account: self.commission_account.map(|p| p.to_string()),
                platform_fee_account: self.platform_fee_account.map(|p| p.to_string()),
                authority_pda: self.authority_pda.map(|p| p.to_string()),
                wsol_sa: self.wsol_sa.map(|p| p.to_string()),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::WrapUnwrapIxData;
    impl IntoProto<proto_def::WrapUnwrapIxData> for WrapUnwrapIxData {
        fn into_proto(self) -> proto_def::WrapUnwrapIxData {
            proto_def::WrapUnwrapIxData {
                order_id: self.order_id,
                amount_in: self.amount_in,
                commission_info: self.commission_info,
                platform_fee_rate: self.platform_fee_rate.into(),
                tob: self.tob,
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for DexSolanaV2ProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                DexSolanaV2ProgramIx::Claim(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Claim(proto_def::ClaimIx {
                        accounts: Some(acc.into_proto()),
                    })),
                },
                DexSolanaV2ProgramIx::CreateTokenAccount(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CreateTokenAccount(
                        proto_def::CreateTokenAccountIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DexSolanaV2ProgramIx::CreateTokenAccountWithSeed(acc, data) => {
                    proto_def::ProgramIxs {
                        ix_oneof: Some(
                            proto_def::program_ixs::IxOneof::CreateTokenAccountWithSeed(
                                proto_def::CreateTokenAccountWithSeedIx {
                                    accounts: Some(acc.into_proto()),
                                    data: Some(data.into_proto()),
                                },
                            ),
                        ),
                    }
                },
                DexSolanaV2ProgramIx::ProxySwap(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ProxySwap(
                        proto_def::ProxySwapIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DexSolanaV2ProgramIx::Swap(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Swap(proto_def::SwapIx {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                DexSolanaV2ProgramIx::SwapTob(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapTob(
                        proto_def::SwapTobIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DexSolanaV2ProgramIx::SwapTobWithReceiver(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapTobWithReceiver(
                        proto_def::SwapTobWithReceiverIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DexSolanaV2ProgramIx::SwapToc(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapToc(
                        proto_def::SwapTocIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                DexSolanaV2ProgramIx::WrapUnwrap(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::WrapUnwrap(
                        proto_def::WrapUnwrapIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message {
            #[cfg(not(feature = "shared-data"))]
            return value.into_proto();

            #[cfg(feature = "shared-data")]
            value.parsed_ix.into_proto()
        }
    }
}
