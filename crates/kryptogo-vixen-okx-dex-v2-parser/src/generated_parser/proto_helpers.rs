//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::Route};
    impl IntoProto<proto_def::Route> for Route {
        fn into_proto(self) -> proto_def::Route {
            proto_def::Route {
                dex: self.dex as i32,
                weight: self.weight.into(),
                index: self.index.into(),
            }
        }
    }
    use crate::types::SwapArgs;
    impl IntoProto<proto_def::SwapArgs> for SwapArgs {
        fn into_proto(self) -> proto_def::SwapArgs {
            proto_def::SwapArgs {
                order_id: self.order_id,
                amount_in: self.amount_in,
                expect_amount_out: self.expect_amount_out,
                slippage: self.slippage.into(),
                routes: self.routes.into_iter().map(|x| x.into_proto()).collect(),
            }
        }
    }
    use crate::types::SwapCpiEvent;
    impl IntoProto<proto_def::SwapCpiEvent> for SwapCpiEvent {
        fn into_proto(self) -> proto_def::SwapCpiEvent {
            proto_def::SwapCpiEvent {
                order_id: self.order_id,
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                source_token_account_owner: self.source_token_account_owner.to_string(),
                destination_token_account_owner: self.destination_token_account_owner.to_string(),
                source_token_change: self.source_token_change,
                destination_token_change: self.destination_token_change,
            }
        }
    }
    use crate::types::SwapEvent;
    impl IntoProto<proto_def::SwapEvent> for SwapEvent {
        fn into_proto(self) -> proto_def::SwapEvent {
            proto_def::SwapEvent {
                dex: self.dex as i32,
                amount_in: self.amount_in,
                amount_out: self.amount_out,
            }
        }
    }
    use crate::types::SwapWithFeesCpiEvent;
    impl IntoProto<proto_def::SwapWithFeesCpiEvent> for SwapWithFeesCpiEvent {
        fn into_proto(self) -> proto_def::SwapWithFeesCpiEvent {
            proto_def::SwapWithFeesCpiEvent {
                order_id: self.order_id,
                source_mint: self.source_mint.to_string(),
                destination_mint: self.destination_mint.to_string(),
                source_token_account_owner: self.source_token_account_owner.to_string(),
                destination_token_account_owner: self.destination_token_account_owner.to_string(),
                source_token_change: self.source_token_change,
                destination_token_change: self.destination_token_change,
                commission_direction: self.commission_direction,
                commission_rate: self.commission_rate,
                commission_amount: self.commission_amount,
                commission_account: self.commission_account.to_string(),
                platform_fee_rate: self.platform_fee_rate.into(),
                platform_fee_amount: self.platform_fee_amount,
                platform_fee_account: self.platform_fee_account.to_string(),
                trim_rate: self.trim_rate.into(),
                trim_amount: self.trim_amount,
                trim_account: self.trim_account.to_string(),
            }
        }
    }
}
