//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::Route;

#[derive(BorshSerialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapArgs {
    pub order_id: u64,
    pub amount_in: u64,
    pub expect_amount_out: u64,
    pub slippage: u16,
    pub routes: Vec<Route>,
}

impl BorshDeserialize for SwapArgs {
    fn deserialize_reader<R: std::io::Read>(reader: &mut R) -> std::io::Result<Self> {
        // Parse the four fixed fields at the beginning
        let order_id = u64::deserialize_reader(reader)?;
        let amount_in = u64::deserialize_reader(reader)?;
        let expect_amount_out = u64::deserialize_reader(reader)?;
        let slippage = u16::deserialize_reader(reader)?;

        // Try to deserialize routes vec
        // Forward compatibility: if we can't parse routes (e.g., unknown Dex types),
        // just return an empty vec so we can still access the amount fields
        let routes: Vec<Route> = Vec::<Route>::deserialize_reader(reader).unwrap_or_default();

        Ok(Self {
            order_id,
            amount_in,
            expect_amount_out,
            slippage,
            routes,
        })
    }
}
