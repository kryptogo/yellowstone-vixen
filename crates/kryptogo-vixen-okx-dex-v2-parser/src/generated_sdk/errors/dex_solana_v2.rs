//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum DexSolanaV2Error {
    /// 6000 - Routes cannot be empty
    #[error("Routes cannot be empty")]
    RoutesCannotBeEmpty = 0x1770,
    /// 6001 - Too many routes
    #[error("Too many routes")]
    TooManyRoutes = 0x1771,
    /// 6002 - Multiple or no output node
    #[error("Multiple or no output node")]
    MultipleOrNoOutputNode = 0x1772,
    /// 6003 - Multiple or no input node
    #[error("Multiple or no input node")]
    MultipleOrNoInputputNode = 0x1773,
    /// 6004 - Not all nodes are processed
    #[error("Not all nodes are processed")]
    NotAllNodesProcessed = 0x1774,
    /// 6005 - Input index should start from zero
    #[error("Input index should start from zero")]
    InputIndexShouldStartFromZero = 0x1775,
    /// 6006 - Circular dependency detected in DAG
    #[error("Circular dependency detected in DAG")]
    CircularDependency = 0x1776,
    /// 6007 - Invalid weight
    #[error("Invalid weight")]
    InvalidWeight = 0x1777,
    /// 6008 - Invalid node order
    #[error("Invalid node order")]
    InvalidNodeOrder = 0x1778,
    /// 6009 - Target node not found
    #[error("Target node not found")]
    TargetNodeNotFound = 0x1779,
    /// 6010 - Min return not reached
    #[error("Min return not reached")]
    MinReturnNotReached = 0x177a,
    /// 6011 - amount_in must be greater than 0
    #[error("amount_in must be greater than 0")]
    AmountInMustBeGreaterThanZero = 0x177b,
    /// 6012 - slippage must be less than 100%
    #[error("slippage must be less than 100%")]
    SlippageTooHigh = 0x177c,
    /// 6013 - invalid expect amount out
    #[error("invalid expect amount out")]
    InvalidExpectAmountOut = 0x177d,
    /// 6014 - weights must sum to 100%
    #[error("weights must sum to 100%")]
    WeightsMustSumTo100 = 0x177e,
    /// 6015 - Invalid share amount
    #[error("Invalid share amount")]
    InvalidShareAmount = 0x177f,
    /// 6016 - Invalid commission rate
    #[error("Invalid commission rate")]
    InvalidCommissionRate = 0x1780,
    /// 6017 - Invalid trim rate
    #[error("Invalid trim rate")]
    InvalidTrimRate = 0x1781,
    /// 6018 - Invalid commission temporary token account
    #[error("Invalid commission temporary token account")]
    InvalidCommissionTemporaryTokenAccount = 0x1782,
    /// 6019 - Invalid accounts length
    #[error("Invalid accounts length")]
    InvalidAccountsLength = 0x1783,
    /// 6020 - Swap authority is not signer
    #[error("Swap authority is not signer")]
    SwapAuthorityIsNotSigner = 0x1784,
    /// 6021 - Invalid authority pda
    #[error("Invalid authority pda")]
    InvalidAuthorityPda = 0x1785,
    /// 6022 - Invalid swap authority
    #[error("Invalid swap authority")]
    InvalidSwapAuthority = 0x1786,
    /// 6023 - Invalid program id
    #[error("Invalid program id")]
    InvalidProgramId = 0x1787,
    /// 6024 - Invalid pool
    #[error("Invalid pool")]
    InvalidPool = 0x1788,
    /// 6025 - Invalid token mint
    #[error("Invalid token mint")]
    InvalidTokenMint = 0x1789,
    /// 6026 - Calculation error
    #[error("Calculation error")]
    CalculationError = 0x178a,
    /// 6027 - Invalid sanctum lst state list data
    #[error("Invalid sanctum lst state list data")]
    InvalidSanctumLstStateListData = 0x178b,
    /// 6028 - Invalid sanctum lst state list index
    #[error("Invalid sanctum lst state list index")]
    InvalidSanctumLstStateListIndex = 0x178c,
    /// 6029 - Invalid sanctum swap accounts
    #[error("Invalid sanctum swap accounts")]
    InvalidSanctumSwapAccounts = 0x178d,
    /// 6030 - Invalid swap authority account
    #[error("Invalid swap authority account")]
    InvalidSwapAuthorityAccounts = 0x178e,
    /// 6031 - Bridge Seed Error
    #[error("Bridge Seed Error")]
    InvalidBridgeSeed = 0x178f,
    /// 6032 - Invalid accounts and instruction length
    #[error("Invalid accounts and instruction length")]
    InvalidBundleInput = 0x1790,
    /// 6033 - Invalid platform fee rate
    #[error("Invalid platform fee rate")]
    InvalidPlatformFeeRate = 0x1791,
    /// 6034 - Amount out must be greater than 0
    #[error("Amount out must be greater than 0")]
    AmountOutMustBeGreaterThanZero = 0x1792,
    /// 6035 - Invalid DampingTerm
    #[error("Invalid DampingTerm")]
    InvalidDampingTerm = 0x1793,
    /// 6036 - Invalid mint
    #[error("Invalid mint")]
    InvalidMint = 0x1794,
    /// 6037 - Invalid platform fee account
    #[error("Invalid platform fee account")]
    InvalidPlatformFeeAccount = 0x1795,
    /// 6038 - Invalid trim account
    #[error("Invalid trim account")]
    InvalidTrimAccount = 0x1796,
    /// 6039 - Invalid platform fee amount
    #[error("Invalid platform fee amount")]
    InvalidPlatformFeeAmount = 0x1797,
    /// 6040 - Invalid fee token account
    #[error("Invalid fee token account")]
    InvalidFeeTokenAccount = 0x1798,
    /// 6041 - Invalid sa authority
    #[error("Invalid sa authority")]
    InvalidSaAuthority = 0x1799,
    /// 6042 - Invalid node from accounts
    #[error("Invalid node from accounts")]
    InvalidNodeFromAccounts = 0x179a,
    /// 6043 - Invalid node to accounts
    #[error("Invalid node to accounts")]
    InvalidNodeToAccounts = 0x179b,
    /// 6044 - Invalid source token account
    #[error("Invalid source token account")]
    InvalidSourceTokenAccount = 0x179c,
    /// 6045 - Invalid token account
    #[error("Invalid token account")]
    InvalidTokenAccount = 0x179d,
    /// 6046 - Invalid destination token account
    #[error("Invalid destination token account")]
    InvalidDestinationTokenAccount = 0x179e,
    /// 6047 - Commission account is none
    #[error("Commission account is none")]
    CommissionAccountIsNone = 0x179f,
    /// 6048 - Platform fee account is none
    #[error("Platform fee account is none")]
    PlatformFeeAccountIsNone = 0x17a0,
    /// 6049 - Trim account is none
    #[error("Trim account is none")]
    TrimAccountIsNone = 0x17a1,
    /// 6050 - Invalid fee account
    #[error("Invalid fee account")]
    InvalidFeeAccount = 0x17a2,
    /// 6051 - Invalid token owner
    #[error("Invalid token owner")]
    InvalidTokenOwner = 0x17a3,
    /// 6052 - Sa authority is none
    #[error("Sa authority is none")]
    SaAuthorityIsNone = 0x17a4,
    /// 6053 - Source token sa is none
    #[error("Source token sa is none")]
    SourceTokenSaIsNone = 0x17a5,
    /// 6054 - Source token program is none
    #[error("Source token program is none")]
    SourceTokenProgramIsNone = 0x17a6,
    /// 6055 - Destination token sa is none
    #[error("Destination token sa is none")]
    DestinationTokenSaIsNone = 0x17a7,
    /// 6056 - Destination token program is none
    #[error("Destination token program is none")]
    DestinationTokenProgramIsNone = 0x17a8,
    /// 6057 - Calculation result must be greater than zero
    #[error("Calculation result must be greater than zero")]
    ResultMustBeGreaterThanZero = 0x17a9,
    /// 6058 - Invalid account data
    #[error("Invalid account data")]
    InvalidAccountData = 0x17aa,
    /// 6059 - Invalid RFQ parameters
    #[error("Invalid RFQ parameters")]
    InvalidRfqParameters = 0x17ab,
    /// 6060 - TOB mode requires authority PDA
    #[error("TOB mode requires authority PDA")]
    TobAuthorityPdaRequired = 0x17ac,
    /// 6061 - TOB mode with WSOL fees requires wsol_sa account
    #[error("TOB mode with WSOL fees requires wsol_sa account")]
    TobWsolSaRequired = 0x17ad,
    /// 6062 - Invalid WSOL SA account
    #[error("Invalid WSOL SA account")]
    InvalidWsolSa = 0x17ae,
    /// 6063 - Invalid commission account
    #[error("Invalid commission account")]
    InvalidCommissionAccount = 0x17af,
    /// 6064 - Invalid actual amount in
    #[error("Invalid actual amount in")]
    InvalidActualAmountIn = 0x17b0,
    /// 6065 - Unexpected SA token account in CPI
    #[error("Unexpected SA token account in CPI")]
    UnexpectedSaTokenAccount = 0x17b1,
    /// 6066 - Invalid source token sa mint
    #[error("Invalid source token sa mint")]
    InvalidSourceTokenSaMint = 0x17b2,
    /// 6067 - Invalid destination token sa mint
    #[error("Invalid destination token sa mint")]
    InvalidDestinationTokenSaMint = 0x17b3,
    /// 6068 - Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds = 0x17b4,
    /// 6069 - Sa authority lamports decreased
    #[error("Sa authority lamports decreased")]
    SaAuthorityLamportsDecreased = 0x17b5,
    /// 6070 - Invalid token program
    #[error("Invalid token program")]
    InvalidTokenProgram = 0x17b6,
    /// 6071 - Invalid signer
    #[error("Invalid signer")]
    InvalidSigner = 0x17b7,
    /// 6072 - Invalid associated token program
    #[error("Invalid associated token program")]
    InvalidAssociatedTokenProgram = 0x17b8,
    /// 6073 - Token program is none
    #[error("Token program is none")]
    TokenProgramIsNone = 0x17b9,
    /// 6074 - Associated token program is none
    #[error("Associated token program is none")]
    AssociatedTokenProgramIsNone = 0x17ba,
    /// 6075 - System program is none
    #[error("System program is none")]
    SystemProgramIsNone = 0x17bb,
    /// 6076 - Insufficient balance for transfer
    #[error("Insufficient balance for transfer")]
    InsufficientBalance = 0x17bc,
    /// 6077 - SOL receiver must be a system account
    #[error("SOL receiver must be a system account")]
    SolReceiverMustBeSystemAccount = 0x17bd,
    /// 6078 - SOL receiver requires acc_close_flag to be true
    #[error("SOL receiver requires acc_close_flag to be true")]
    SolReceiverRequiresAccCloseFlag = 0x17be,
    /// 6079 - Destination must be wSOL when sol_receiver is specified
    #[error("Destination must be wSOL when sol_receiver is specified")]
    DestinationMustBeWsolForSolReceiver = 0x17bf,
    /// 6080 - Invalid goonfi parameters
    #[error("Invalid goonfi parameters")]
    InvalidGoonfiParameters = 0x17c0,
    /// 6081 - Adapter abort
    #[error("Adapter abort")]
    AdapterAbort = 0x17c1,
    /// 6082 - Inconsistent fee account types
    #[error("Inconsistent fee account types")]
    InconsistentFeeAccountTypes = 0x17c2,
}

impl From<DexSolanaV2Error> for solana_program_error::ProgramError {
    fn from(e: DexSolanaV2Error) -> Self { solana_program_error::ProgramError::Custom(e as u32) }
}
