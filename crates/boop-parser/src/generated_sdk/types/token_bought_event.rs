//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TokenBoughtEvent {
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    pub amount_in: u64,
    pub amount_out: u64,
    pub swap_fee: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub buyer: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub recipient: Pubkey,
}

impl TokenBoughtEvent {
    /// TokenBoughtEvent discriminator bytes
    pub const DISCRIMINATOR: [u8; 8] = [0x47, 0x59, 0xde, 0x7c, 0xd7, 0xc0, 0xe6, 0x8a];

    /// Parse TokenBoughtEvent from program logs
    pub fn from_logs(logs: &[&str]) -> Option<Self> {
        for log in logs {
            if let Some(event) = Self::from_log(log) {
                return Some(event);
            }
        }
        None
    }

    /// Parse TokenBoughtEvent from a single log message
    pub fn from_log(log: &str) -> Option<Self> {
        use base64::{engine::general_purpose, Engine as _};

        if let Some(data_part) = log.strip_prefix("Program data: ") {
            if let Ok(decoded) = general_purpose::STANDARD.decode(data_part) {
                if decoded.starts_with(&Self::DISCRIMINATOR) {
                    return Self::try_from_slice(&decoded[8..]).ok();
                }
            }
        }
        None
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_discriminator_constant() {
        assert_eq!(TokenBoughtEvent::DISCRIMINATOR, [
            0x47, 0x59, 0xde, 0x7c, 0xd7, 0xc0, 0xe6, 0x8a
        ]);
    }

    #[test]
    fn test_parse_token_bought_event_from_log() {
        let log = "Program data: R1nefNfA5ooC63jXhMfA3EVJ0yfacmO4e8b2a84CgvcSak7ASyPEYwDrCL8BAAAA0bREqQtFhABohx8JAAAAALhfl58dqukFvVQG+nDtECbr3BhIRvw4iOsVnHMYM6OuuF+Xnx2q6QW9VAb6cO0QJuvcGEhG/DiI6xWccxgzo64=";

        let result = TokenBoughtEvent::from_log(log);
        assert!(
            result.is_some(),
            "Should successfully parse TokenBoughtEvent from log"
        );

        let event = result.unwrap();
        assert_eq!(event.amount_in, 7500000000, "amount_in should match");
        assert_eq!(
            event.amount_out, 37230613312615633,
            "amount_out should match"
        );
        println!("Parsed TokenBoughtEvent: {event:?}");
    }

    #[test]
    fn test_invalid_log_format() {
        let invalid_log = "Invalid log format";
        let result = TokenBoughtEvent::from_log(invalid_log);
        assert!(result.is_none(), "Should not parse invalid log format");
    }

    #[test]
    fn test_invalid_discriminator() {
        let log_with_invalid_discriminator =
            "Program data: AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8=";
        let result = TokenBoughtEvent::from_log(log_with_invalid_discriminator);
        assert!(
            result.is_none(),
            "Should not parse with invalid discriminator"
        );
    }
}
