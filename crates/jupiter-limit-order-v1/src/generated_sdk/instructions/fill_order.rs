//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const FILL_ORDER_DISCRIMINATOR: [u8; 8] = [232, 122, 115, 25, 199, 143, 136, 162];

/// Accounts.
#[derive(Debug)]
pub struct FillOrder {
    pub order: solana_pubkey::Pubkey,

    pub reserve: solana_pubkey::Pubkey,

    pub maker: solana_pubkey::Pubkey,

    pub taker: solana_pubkey::Pubkey,

    pub taker_output_account: solana_pubkey::Pubkey,

    pub maker_output_account: solana_pubkey::Pubkey,

    pub taker_input_account: solana_pubkey::Pubkey,

    pub fee_authority: solana_pubkey::Pubkey,

    pub program_fee_account: solana_pubkey::Pubkey,

    pub referral: Option<solana_pubkey::Pubkey>,

    pub token_program: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl FillOrder {
    pub fn instruction(&self, args: FillOrderInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: FillOrderInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.order, false));
        accounts.push(solana_instruction::AccountMeta::new(self.reserve, false));
        accounts.push(solana_instruction::AccountMeta::new(self.maker, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.taker, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.taker_output_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.maker_output_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.taker_input_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.fee_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.program_fee_account,
            false,
        ));
        if let Some(referral) = self.referral {
            accounts.push(solana_instruction::AccountMeta::new(referral, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMIT_ORDER_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&FillOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FillOrderInstructionData {
    discriminator: [u8; 8],
}

impl FillOrderInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [232, 122, 115, 25, 199, 143, 136, 162],
        }
    }
}

impl Default for FillOrderInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FillOrderInstructionArgs {
    pub making_amount: u64,
    pub max_taking_amount: u64,
}

/// Instruction builder for `FillOrder`.
///
/// ### Accounts:
///
///   0. `[writable]` order
///   1. `[writable]` reserve
///   2. `[writable]` maker
///   3. `[signer]` taker
///   4. `[writable]` taker_output_account
///   5. `[writable]` maker_output_account
///   6. `[writable]` taker_input_account
///   7. `[]` fee_authority
///   8. `[writable]` program_fee_account
///   9. `[writable, optional]` referral
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct FillOrderBuilder {
    order: Option<solana_pubkey::Pubkey>,
    reserve: Option<solana_pubkey::Pubkey>,
    maker: Option<solana_pubkey::Pubkey>,
    taker: Option<solana_pubkey::Pubkey>,
    taker_output_account: Option<solana_pubkey::Pubkey>,
    maker_output_account: Option<solana_pubkey::Pubkey>,
    taker_input_account: Option<solana_pubkey::Pubkey>,
    fee_authority: Option<solana_pubkey::Pubkey>,
    program_fee_account: Option<solana_pubkey::Pubkey>,
    referral: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    making_amount: Option<u64>,
    max_taking_amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl FillOrderBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn order(&mut self, order: solana_pubkey::Pubkey) -> &mut Self {
        self.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
        self.reserve = Some(reserve);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: solana_pubkey::Pubkey) -> &mut Self {
        self.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn taker(&mut self, taker: solana_pubkey::Pubkey) -> &mut Self {
        self.taker = Some(taker);
        self
    }

    #[inline(always)]
    pub fn taker_output_account(
        &mut self,
        taker_output_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.taker_output_account = Some(taker_output_account);
        self
    }

    #[inline(always)]
    pub fn maker_output_account(
        &mut self,
        maker_output_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.maker_output_account = Some(maker_output_account);
        self
    }

    #[inline(always)]
    pub fn taker_input_account(&mut self, taker_input_account: solana_pubkey::Pubkey) -> &mut Self {
        self.taker_input_account = Some(taker_input_account);
        self
    }

    #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_authority = Some(fee_authority);
        self
    }

    #[inline(always)]
    pub fn program_fee_account(&mut self, program_fee_account: solana_pubkey::Pubkey) -> &mut Self {
        self.program_fee_account = Some(program_fee_account);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn referral(&mut self, referral: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.referral = referral;
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn making_amount(&mut self, making_amount: u64) -> &mut Self {
        self.making_amount = Some(making_amount);
        self
    }

    #[inline(always)]
    pub fn max_taking_amount(&mut self, max_taking_amount: u64) -> &mut Self {
        self.max_taking_amount = Some(max_taking_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = FillOrder {
            order: self.order.expect("order is not set"),
            reserve: self.reserve.expect("reserve is not set"),
            maker: self.maker.expect("maker is not set"),
            taker: self.taker.expect("taker is not set"),
            taker_output_account: self
                .taker_output_account
                .expect("taker_output_account is not set"),
            maker_output_account: self
                .maker_output_account
                .expect("maker_output_account is not set"),
            taker_input_account: self
                .taker_input_account
                .expect("taker_input_account is not set"),
            fee_authority: self.fee_authority.expect("fee_authority is not set"),
            program_fee_account: self
                .program_fee_account
                .expect("program_fee_account is not set"),
            referral: self.referral,
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = FillOrderInstructionArgs {
            making_amount: self
                .making_amount
                .clone()
                .expect("making_amount is not set"),
            max_taking_amount: self
                .max_taking_amount
                .clone()
                .expect("max_taking_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `fill_order` CPI accounts.
pub struct FillOrderCpiAccounts<'a, 'b> {
    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub reserve: &'b solana_account_info::AccountInfo<'a>,

    pub maker: &'b solana_account_info::AccountInfo<'a>,

    pub taker: &'b solana_account_info::AccountInfo<'a>,

    pub taker_output_account: &'b solana_account_info::AccountInfo<'a>,

    pub maker_output_account: &'b solana_account_info::AccountInfo<'a>,

    pub taker_input_account: &'b solana_account_info::AccountInfo<'a>,

    pub fee_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub referral: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `fill_order` CPI instruction.
pub struct FillOrderCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub reserve: &'b solana_account_info::AccountInfo<'a>,

    pub maker: &'b solana_account_info::AccountInfo<'a>,

    pub taker: &'b solana_account_info::AccountInfo<'a>,

    pub taker_output_account: &'b solana_account_info::AccountInfo<'a>,

    pub maker_output_account: &'b solana_account_info::AccountInfo<'a>,

    pub taker_input_account: &'b solana_account_info::AccountInfo<'a>,

    pub fee_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub referral: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: FillOrderInstructionArgs,
}

impl<'a, 'b> FillOrderCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: FillOrderCpiAccounts<'a, 'b>,
        args: FillOrderInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            order: accounts.order,
            reserve: accounts.reserve,
            maker: accounts.maker,
            taker: accounts.taker,
            taker_output_account: accounts.taker_output_account,
            maker_output_account: accounts.maker_output_account,
            taker_input_account: accounts.taker_input_account,
            fee_authority: accounts.fee_authority,
            program_fee_account: accounts.program_fee_account,
            referral: accounts.referral,
            token_program: accounts.token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.order.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.maker.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.taker.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.taker_output_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.maker_output_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.taker_input_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.fee_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.program_fee_account.key,
            false,
        ));
        if let Some(referral) = self.referral {
            accounts.push(solana_instruction::AccountMeta::new(*referral.key, false));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMIT_ORDER_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&FillOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.order.clone());
        account_infos.push(self.reserve.clone());
        account_infos.push(self.maker.clone());
        account_infos.push(self.taker.clone());
        account_infos.push(self.taker_output_account.clone());
        account_infos.push(self.maker_output_account.clone());
        account_infos.push(self.taker_input_account.clone());
        account_infos.push(self.fee_authority.clone());
        account_infos.push(self.program_fee_account.clone());
        if let Some(referral) = self.referral {
            account_infos.push(referral.clone());
        }
        account_infos.push(self.token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `FillOrder` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` order
///   1. `[writable]` reserve
///   2. `[writable]` maker
///   3. `[signer]` taker
///   4. `[writable]` taker_output_account
///   5. `[writable]` maker_output_account
///   6. `[writable]` taker_input_account
///   7. `[]` fee_authority
///   8. `[writable]` program_fee_account
///   9. `[writable, optional]` referral
///   10. `[]` token_program
///   11. `[]` system_program
#[derive(Clone, Debug)]
pub struct FillOrderCpiBuilder<'a, 'b> {
    instruction: Box<FillOrderCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> FillOrderCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(FillOrderCpiBuilderInstruction {
            __program: program,
            order: None,
            reserve: None,
            maker: None,
            taker: None,
            taker_output_account: None,
            maker_output_account: None,
            taker_input_account: None,
            fee_authority: None,
            program_fee_account: None,
            referral: None,
            token_program: None,
            system_program: None,
            making_amount: None,
            max_taking_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn order(&mut self, order: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.reserve = Some(reserve);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn taker(&mut self, taker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.taker = Some(taker);
        self
    }

    #[inline(always)]
    pub fn taker_output_account(
        &mut self,
        taker_output_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.taker_output_account = Some(taker_output_account);
        self
    }

    #[inline(always)]
    pub fn maker_output_account(
        &mut self,
        maker_output_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.maker_output_account = Some(maker_output_account);
        self
    }

    #[inline(always)]
    pub fn taker_input_account(
        &mut self,
        taker_input_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.taker_input_account = Some(taker_input_account);
        self
    }

    #[inline(always)]
    pub fn fee_authority(
        &mut self,
        fee_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_authority = Some(fee_authority);
        self
    }

    #[inline(always)]
    pub fn program_fee_account(
        &mut self,
        program_fee_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_fee_account = Some(program_fee_account);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn referral(
        &mut self,
        referral: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referral = referral;
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn making_amount(&mut self, making_amount: u64) -> &mut Self {
        self.instruction.making_amount = Some(making_amount);
        self
    }

    #[inline(always)]
    pub fn max_taking_amount(&mut self, max_taking_amount: u64) -> &mut Self {
        self.instruction.max_taking_amount = Some(max_taking_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = FillOrderInstructionArgs {
            making_amount: self
                .instruction
                .making_amount
                .clone()
                .expect("making_amount is not set"),
            max_taking_amount: self
                .instruction
                .max_taking_amount
                .clone()
                .expect("max_taking_amount is not set"),
        };
        let instruction = FillOrderCpi {
            __program: self.instruction.__program,

            order: self.instruction.order.expect("order is not set"),

            reserve: self.instruction.reserve.expect("reserve is not set"),

            maker: self.instruction.maker.expect("maker is not set"),

            taker: self.instruction.taker.expect("taker is not set"),

            taker_output_account: self
                .instruction
                .taker_output_account
                .expect("taker_output_account is not set"),

            maker_output_account: self
                .instruction
                .maker_output_account
                .expect("maker_output_account is not set"),

            taker_input_account: self
                .instruction
                .taker_input_account
                .expect("taker_input_account is not set"),

            fee_authority: self
                .instruction
                .fee_authority
                .expect("fee_authority is not set"),

            program_fee_account: self
                .instruction
                .program_fee_account
                .expect("program_fee_account is not set"),

            referral: self.instruction.referral,

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct FillOrderCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    order: Option<&'b solana_account_info::AccountInfo<'a>>,
    reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker: Option<&'b solana_account_info::AccountInfo<'a>>,
    taker: Option<&'b solana_account_info::AccountInfo<'a>>,
    taker_output_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker_output_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    taker_input_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    referral: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    making_amount: Option<u64>,
    max_taking_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
