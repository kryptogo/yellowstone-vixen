//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const INIT_FEE_DISCRIMINATOR: [u8; 8] = [13, 9, 211, 107, 62, 172, 224, 67];

/// Accounts.
#[derive(Debug)]
pub struct InitFee {
    pub keeper: solana_pubkey::Pubkey,

    pub fee_authority: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl InitFee {
    pub fn instruction(&self, args: InitFeeInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitFeeInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.keeper, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.fee_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitFeeInstructionData {
    discriminator: [u8; 8],
}

impl InitFeeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [13, 9, 211, 107, 62, 172, 224, 67],
        }
    }
}

impl Default for InitFeeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitFeeInstructionArgs {
    pub maker_fee: u64,
    pub maker_stable_fee: u64,
    pub taker_fee: u64,
    pub taker_stable_fee: u64,
}

/// Instruction builder for `InitFee`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` keeper
///   1. `[writable]` fee_authority
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitFeeBuilder {
    keeper: Option<solana_pubkey::Pubkey>,
    fee_authority: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    maker_fee: Option<u64>,
    maker_stable_fee: Option<u64>,
    taker_fee: Option<u64>,
    taker_stable_fee: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitFeeBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn keeper(&mut self, keeper: solana_pubkey::Pubkey) -> &mut Self {
        self.keeper = Some(keeper);
        self
    }

    #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_authority = Some(fee_authority);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn maker_fee(&mut self, maker_fee: u64) -> &mut Self {
        self.maker_fee = Some(maker_fee);
        self
    }

    #[inline(always)]
    pub fn maker_stable_fee(&mut self, maker_stable_fee: u64) -> &mut Self {
        self.maker_stable_fee = Some(maker_stable_fee);
        self
    }

    #[inline(always)]
    pub fn taker_fee(&mut self, taker_fee: u64) -> &mut Self {
        self.taker_fee = Some(taker_fee);
        self
    }

    #[inline(always)]
    pub fn taker_stable_fee(&mut self, taker_stable_fee: u64) -> &mut Self {
        self.taker_stable_fee = Some(taker_stable_fee);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitFee {
            keeper: self.keeper.expect("keeper is not set"),
            fee_authority: self.fee_authority.expect("fee_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitFeeInstructionArgs {
            maker_fee: self.maker_fee.clone().expect("maker_fee is not set"),
            maker_stable_fee: self
                .maker_stable_fee
                .clone()
                .expect("maker_stable_fee is not set"),
            taker_fee: self.taker_fee.clone().expect("taker_fee is not set"),
            taker_stable_fee: self
                .taker_stable_fee
                .clone()
                .expect("taker_stable_fee is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `init_fee` CPI accounts.
pub struct InitFeeCpiAccounts<'a, 'b> {
    pub keeper: &'b solana_account_info::AccountInfo<'a>,

    pub fee_authority: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `init_fee` CPI instruction.
pub struct InitFeeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub keeper: &'b solana_account_info::AccountInfo<'a>,

    pub fee_authority: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitFeeInstructionArgs,
}

impl<'a, 'b> InitFeeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitFeeCpiAccounts<'a, 'b>,
        args: InitFeeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            keeper: accounts.keeper,
            fee_authority: accounts.fee_authority,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.keeper.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fee_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.keeper.clone());
        account_infos.push(self.fee_authority.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitFee` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` keeper
///   1. `[writable]` fee_authority
///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitFeeCpiBuilder<'a, 'b> {
    instruction: Box<InitFeeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitFeeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitFeeCpiBuilderInstruction {
            __program: program,
            keeper: None,
            fee_authority: None,
            system_program: None,
            maker_fee: None,
            maker_stable_fee: None,
            taker_fee: None,
            taker_stable_fee: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn keeper(&mut self, keeper: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.keeper = Some(keeper);
        self
    }

    #[inline(always)]
    pub fn fee_authority(
        &mut self,
        fee_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_authority = Some(fee_authority);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn maker_fee(&mut self, maker_fee: u64) -> &mut Self {
        self.instruction.maker_fee = Some(maker_fee);
        self
    }

    #[inline(always)]
    pub fn maker_stable_fee(&mut self, maker_stable_fee: u64) -> &mut Self {
        self.instruction.maker_stable_fee = Some(maker_stable_fee);
        self
    }

    #[inline(always)]
    pub fn taker_fee(&mut self, taker_fee: u64) -> &mut Self {
        self.instruction.taker_fee = Some(taker_fee);
        self
    }

    #[inline(always)]
    pub fn taker_stable_fee(&mut self, taker_stable_fee: u64) -> &mut Self {
        self.instruction.taker_stable_fee = Some(taker_stable_fee);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = InitFeeInstructionArgs {
            maker_fee: self
                .instruction
                .maker_fee
                .clone()
                .expect("maker_fee is not set"),
            maker_stable_fee: self
                .instruction
                .maker_stable_fee
                .clone()
                .expect("maker_stable_fee is not set"),
            taker_fee: self
                .instruction
                .taker_fee
                .clone()
                .expect("taker_fee is not set"),
            taker_stable_fee: self
                .instruction
                .taker_stable_fee
                .clone()
                .expect("taker_stable_fee is not set"),
        };
        let instruction = InitFeeCpi {
            __program: self.instruction.__program,

            keeper: self.instruction.keeper.expect("keeper is not set"),

            fee_authority: self
                .instruction
                .fee_authority
                .expect("fee_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitFeeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    keeper: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker_fee: Option<u64>,
    maker_stable_fee: Option<u64>,
    taker_fee: Option<u64>,
    taker_stable_fee: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
