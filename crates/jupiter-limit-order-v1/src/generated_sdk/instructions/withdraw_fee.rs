//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const WITHDRAW_FEE_DISCRIMINATOR: [u8; 8] = [14, 122, 231, 218, 31, 238, 223, 150];

/// Accounts.
#[derive(Debug)]
pub struct WithdrawFee {
    pub admin: solana_pubkey::Pubkey,
    /// CHECK
    pub fee_authority: solana_pubkey::Pubkey,

    pub program_fee_account: solana_pubkey::Pubkey,

    pub admin_token_acocunt: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub mint: solana_pubkey::Pubkey,
}

impl WithdrawFee {
    pub fn instruction(&self, args: WithdrawFeeInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: WithdrawFeeInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.admin, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.fee_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.program_fee_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.admin_token_acocunt,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&WithdrawFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawFeeInstructionData {
    discriminator: [u8; 8],
}

impl WithdrawFeeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [14, 122, 231, 218, 31, 238, 223, 150],
        }
    }
}

impl Default for WithdrawFeeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawFeeInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `WithdrawFee`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin
///   1. `[]` fee_authority
///   2. `[writable]` program_fee_account
///   3. `[writable]` admin_token_acocunt
///   4. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   5. `[]` mint
#[derive(Clone, Debug, Default)]
pub struct WithdrawFeeBuilder {
    admin: Option<solana_pubkey::Pubkey>,
    fee_authority: Option<solana_pubkey::Pubkey>,
    program_fee_account: Option<solana_pubkey::Pubkey>,
    admin_token_acocunt: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    mint: Option<solana_pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl WithdrawFeeBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// CHECK
    #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_authority = Some(fee_authority);
        self
    }

    #[inline(always)]
    pub fn program_fee_account(&mut self, program_fee_account: solana_pubkey::Pubkey) -> &mut Self {
        self.program_fee_account = Some(program_fee_account);
        self
    }

    #[inline(always)]
    pub fn admin_token_acocunt(&mut self, admin_token_acocunt: solana_pubkey::Pubkey) -> &mut Self {
        self.admin_token_acocunt = Some(admin_token_acocunt);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = WithdrawFee {
            admin: self.admin.expect("admin is not set"),
            fee_authority: self.fee_authority.expect("fee_authority is not set"),
            program_fee_account: self
                .program_fee_account
                .expect("program_fee_account is not set"),
            admin_token_acocunt: self
                .admin_token_acocunt
                .expect("admin_token_acocunt is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            mint: self.mint.expect("mint is not set"),
        };
        let args = WithdrawFeeInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `withdraw_fee` CPI accounts.
pub struct WithdrawFeeCpiAccounts<'a, 'b> {
    pub admin: &'b solana_account_info::AccountInfo<'a>,
    /// CHECK
    pub fee_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub admin_token_acocunt: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,
}

/// `withdraw_fee` CPI instruction.
pub struct WithdrawFeeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,
    /// CHECK
    pub fee_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub admin_token_acocunt: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: WithdrawFeeInstructionArgs,
}

impl<'a, 'b> WithdrawFeeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: WithdrawFeeCpiAccounts<'a, 'b>,
        args: WithdrawFeeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            admin: accounts.admin,
            fee_authority: accounts.fee_authority,
            program_fee_account: accounts.program_fee_account,
            admin_token_acocunt: accounts.admin_token_acocunt,
            token_program: accounts.token_program,
            mint: accounts.mint,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.admin.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.fee_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.program_fee_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.admin_token_acocunt.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&WithdrawFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.fee_authority.clone());
        account_infos.push(self.program_fee_account.clone());
        account_infos.push(self.admin_token_acocunt.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `WithdrawFee` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin
///   1. `[]` fee_authority
///   2. `[writable]` program_fee_account
///   3. `[writable]` admin_token_acocunt
///   4. `[]` token_program
///   5. `[]` mint
#[derive(Clone, Debug)]
pub struct WithdrawFeeCpiBuilder<'a, 'b> {
    instruction: Box<WithdrawFeeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawFeeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WithdrawFeeCpiBuilderInstruction {
            __program: program,
            admin: None,
            fee_authority: None,
            program_fee_account: None,
            admin_token_acocunt: None,
            token_program: None,
            mint: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    /// CHECK
    #[inline(always)]
    pub fn fee_authority(
        &mut self,
        fee_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_authority = Some(fee_authority);
        self
    }

    #[inline(always)]
    pub fn program_fee_account(
        &mut self,
        program_fee_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_fee_account = Some(program_fee_account);
        self
    }

    #[inline(always)]
    pub fn admin_token_acocunt(
        &mut self,
        admin_token_acocunt: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_token_acocunt = Some(admin_token_acocunt);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = WithdrawFeeInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = WithdrawFeeCpi {
            __program: self.instruction.__program,

            admin: self.instruction.admin.expect("admin is not set"),

            fee_authority: self
                .instruction
                .fee_authority
                .expect("fee_authority is not set"),

            program_fee_account: self
                .instruction
                .program_fee_account
                .expect("program_fee_account is not set"),

            admin_token_acocunt: self
                .instruction
                .admin_token_acocunt
                .expect("admin_token_acocunt is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            mint: self.instruction.mint.expect("mint is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WithdrawFeeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    admin_token_acocunt: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
