//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{Fee, Order},
    deserialize_checked, ID,
};

/// LimitOrder Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LimitOrderProgramState {
    Fee(Fee),
    Order(Order),
}

impl LimitOrderProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [24, 55, 150, 250, 168, 27, 101, 178] => Ok(LimitOrderProgramState::Fee(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [134, 173, 223, 185, 77, 86, 28, 51] => Ok(LimitOrderProgramState::Order(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = LimitOrderProgramState;

    fn id(&self) -> std::borrow::Cow<'static, str> { "limit_order::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program_error::ProgramError::InvalidArgument)?;
        let res = LimitOrderProgramState::try_unpack(&inner.data);

        #[cfg(feature = "tracing")]
        if let Err(e) = &res {
            let acc_discriminator: [u8; 8] = inner.data[0..8].try_into()?;
            tracing::info!(
                name: "incorrectly_parsed_account",
                name = "account_update",
                program = ID.to_string(),
                account = "deserialization_error",
                discriminator = ?acc_discriminator,
                error = ?e
            );
        }

        res
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto_helper_traits;

    use crate::proto_def;
    proto_helper_traits!();
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, Fee, LimitOrderProgramState};
    impl IntoProto<proto_def::Fee> for Fee {
        fn into_proto(self) -> proto_def::Fee {
            proto_def::Fee {
                maker_fee: self.maker_fee,
                maker_stable_fee: self.maker_stable_fee,
                taker_fee: self.taker_fee,
                taker_stable_fee: self.taker_stable_fee,
            }
        }
    }
    use super::Order;
    impl IntoProto<proto_def::Order> for Order {
        fn into_proto(self) -> proto_def::Order {
            proto_def::Order {
                maker: self.maker.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                waiting: self.waiting,
                ori_making_amount: self.ori_making_amount,
                ori_taking_amount: self.ori_taking_amount,
                making_amount: self.making_amount,
                taking_amount: self.taking_amount,
                maker_input_account: self.maker_input_account.to_string(),
                maker_output_account: self.maker_output_account.to_string(),
                reserve: self.reserve.to_string(),
                borrow_making_amount: self.borrow_making_amount,
                expired_at: self.expired_at,
                base: self.base.to_string(),
                referral: self.referral.map(|x| x.to_string()),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for LimitOrderProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                LimitOrderProgramState::Fee(data) => {
                    proto_def::program_state::StateOneof::Fee(data.into_proto())
                },
                LimitOrderProgramState::Order(data) => {
                    proto_def::program_state::StateOneof::Order(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
