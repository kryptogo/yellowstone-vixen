//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

#[cfg(feature = "shared-data")]
use std::sync::Arc;

#[cfg(feature = "shared-data")]
use yellowstone_vixen_core::InstructionUpdateOutput;

use crate::{
    deserialize_checked,
    instructions::{
        CancelExpiredOrder as CancelExpiredOrderIxAccounts, CancelOrder as CancelOrderIxAccounts,
        FillOrder as FillOrderIxAccounts, FillOrderInstructionArgs as FillOrderIxData,
        FlashFillOrder as FlashFillOrderIxAccounts,
        FlashFillOrderInstructionArgs as FlashFillOrderIxData, InitFee as InitFeeIxAccounts,
        InitFeeInstructionArgs as InitFeeIxData, InitializeOrder as InitializeOrderIxAccounts,
        InitializeOrderInstructionArgs as InitializeOrderIxData,
        PreFlashFillOrder as PreFlashFillOrderIxAccounts,
        PreFlashFillOrderInstructionArgs as PreFlashFillOrderIxData,
        UpdateFee as UpdateFeeIxAccounts, UpdateFeeInstructionArgs as UpdateFeeIxData,
        WithdrawFee as WithdrawFeeIxAccounts, WithdrawFeeInstructionArgs as WithdrawFeeIxData,
    },
    ID,
};

/// LimitOrder Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LimitOrderProgramIx {
    InitializeOrder(InitializeOrderIxAccounts, InitializeOrderIxData),
    FillOrder(FillOrderIxAccounts, FillOrderIxData),
    PreFlashFillOrder(PreFlashFillOrderIxAccounts, PreFlashFillOrderIxData),
    FlashFillOrder(FlashFillOrderIxAccounts, FlashFillOrderIxData),
    CancelOrder(CancelOrderIxAccounts),
    CancelExpiredOrder(CancelExpiredOrderIxAccounts),
    WithdrawFee(WithdrawFeeIxAccounts, WithdrawFeeIxData),
    InitFee(InitFeeIxAccounts, InitFeeIxData),
    UpdateFee(UpdateFeeIxAccounts, UpdateFeeIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    #[cfg(not(feature = "shared-data"))]
    type Output = LimitOrderProgramIx;
    #[cfg(feature = "shared-data")]
    type Output = InstructionUpdateOutput<LimitOrderProgramIx>;

    fn id(&self) -> std::borrow::Cow<'static, str> { "LimitOrder::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            let res = InstructionParser::parse_impl(ix_update);

            #[cfg(feature = "tracing")]
            if let Err(e) = &res {
                let ix_discriminator: [u8; 8] = ix_update.data[0..8].try_into()?;

                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "deserialization_error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            }

            res
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<<Self as yellowstone_vixen_core::Parser>::Output> {
        let accounts_len = ix.accounts.len();
        let accounts = &mut ix.accounts.iter();

        #[cfg(feature = "shared-data")]
        let shared_data = Arc::clone(&ix.shared);
        #[cfg(feature = "shared-data")]
        let ix_index = ix.ix_index;

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [133, 110, 74, 175, 112, 159, 245, 159] => {
                let expected_accounts_len = 12;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = InitializeOrderIxAccounts {
                    base: next_account(accounts)?,
                    maker: next_account(accounts)?,
                    order: next_account(accounts)?,
                    reserve: next_account(accounts)?,
                    maker_input_account: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    maker_output_account: next_account(accounts)?,
                    referral: next_program_id_optional_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    rent: next_account(accounts)?,
                };
                let de_ix_data: InitializeOrderIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::InitializeOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [232, 122, 115, 25, 199, 143, 136, 162] => {
                let expected_accounts_len = 12;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = FillOrderIxAccounts {
                    order: next_account(accounts)?,
                    reserve: next_account(accounts)?,
                    maker: next_account(accounts)?,
                    taker: next_account(accounts)?,
                    taker_output_account: next_account(accounts)?,
                    maker_output_account: next_account(accounts)?,
                    taker_input_account: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    program_fee_account: next_account(accounts)?,
                    referral: next_program_id_optional_account(accounts)?,
                    token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                };
                let de_ix_data: FillOrderIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::FillOrder(ix_accounts, de_ix_data))
            },
            [240, 47, 153, 68, 13, 190, 225, 42] => {
                let expected_accounts_len = 8;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = PreFlashFillOrderIxAccounts {
                    order: next_account(accounts)?,
                    reserve: next_account(accounts)?,
                    taker: next_account(accounts)?,
                    taker_output_account: next_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    input_mint_token_program: next_account(accounts)?,
                    instruction: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                };
                let de_ix_data: PreFlashFillOrderIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::PreFlashFillOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [252, 104, 18, 134, 164, 78, 18, 140] => {
                let expected_accounts_len = 14;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = FlashFillOrderIxAccounts {
                    order: next_account(accounts)?,
                    reserve: next_account(accounts)?,
                    maker: next_account(accounts)?,
                    taker: next_account(accounts)?,
                    maker_output_account: next_account(accounts)?,
                    taker_input_account: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    program_fee_account: next_account(accounts)?,
                    referral: next_program_id_optional_account(accounts)?,
                    input_mint: next_account(accounts)?,
                    input_mint_token_program: next_account(accounts)?,
                    output_mint: next_account(accounts)?,
                    output_mint_token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                };
                let de_ix_data: FlashFillOrderIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::FlashFillOrder(ix_accounts, de_ix_data))
            },
            [95, 129, 237, 240, 8, 49, 223, 132] => {
                let expected_accounts_len = 7;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CancelOrderIxAccounts {
                    order: next_account(accounts)?,
                    reserve: next_account(accounts)?,
                    maker: next_account(accounts)?,
                    maker_input_account: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    input_mint: next_program_id_optional_account(accounts)?,
                };
                Ok(LimitOrderProgramIx::CancelOrder(ix_accounts))
            },
            [216, 120, 64, 235, 155, 19, 229, 99] => {
                let expected_accounts_len = 7;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CancelExpiredOrderIxAccounts {
                    order: next_account(accounts)?,
                    reserve: next_account(accounts)?,
                    maker: next_account(accounts)?,
                    maker_input_account: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    input_mint: next_program_id_optional_account(accounts)?,
                };
                Ok(LimitOrderProgramIx::CancelExpiredOrder(ix_accounts))
            },
            [14, 122, 231, 218, 31, 238, 223, 150] => {
                let expected_accounts_len = 6;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = WithdrawFeeIxAccounts {
                    admin: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    program_fee_account: next_account(accounts)?,
                    admin_token_acocunt: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    mint: next_account(accounts)?,
                };
                let de_ix_data: WithdrawFeeIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::WithdrawFee(ix_accounts, de_ix_data))
            },
            [13, 9, 211, 107, 62, 172, 224, 67] => {
                let expected_accounts_len = 3;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = InitFeeIxAccounts {
                    keeper: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                };
                let de_ix_data: InitFeeIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::InitFee(ix_accounts, de_ix_data))
            },
            [232, 253, 195, 247, 148, 212, 73, 222] => {
                let expected_accounts_len = 2;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = UpdateFeeIxAccounts {
                    keeper: next_account(accounts)?,
                    fee_authority: next_account(accounts)?,
                };
                let de_ix_data: UpdateFeeIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(LimitOrderProgramIx::UpdateFee(ix_accounts, de_ix_data))
            },
            // self cpi log
            [0xe4, 0x45, 0xa5, 0x2e, 0x51, 0xcb, 0x9a, 0x1d] => {
                Err(yellowstone_vixen_core::ParseError::Filtered)
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        #[cfg(not(feature = "shared-data"))]
        return ix;

        #[cfg(feature = "shared-data")]
        ix.map(|ix| InstructionUpdateOutput {
            parsed_ix: ix,
            shared_data,
            ix_index,
        })
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

fn next_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
) -> Result<solana_pubkey::Pubkey, yellowstone_vixen_core::ParseError> {
    accounts
        .next()
        .ok_or(yellowstone_vixen_core::ParseError::from(
            "No more accounts to parse",
        ))
        .map(|acc| acc.0.into())
}

/// Gets the next optional account using the ommited account strategy (account is not passed at all at the instruction).
/// ### Be careful to use this function when more than one account is optional in the Instruction.
///  Only by order there is no way to which ones of the optional accounts are present.
pub fn next_optional_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
    actual_accounts_len: usize,
    expected_accounts_len: &mut usize,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    if actual_accounts_len == *expected_accounts_len + 1 {
        *expected_accounts_len += 1;
        Ok(Some(next_account(accounts)?))
    } else {
        Ok(None)
    }
}

/// Gets the next optional account using the traditional Program ID strategy.
///  (If account key is the program ID, means account is not present)
pub fn next_program_id_optional_account<
    'a,
    T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>,
>(
    accounts: &mut T,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    let account_key = next_account(accounts)?;
    if account_key.eq(&ID) {
        Ok(None)
    } else {
        Ok(Some(account_key))
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto_helper_traits;

    use super::{InstructionParser, LimitOrderProgramIx};
    use crate::proto_def;
    proto_helper_traits!();
    use yellowstone_vixen_core::proto::ParseProto;

    use super::InitializeOrderIxAccounts;
    impl IntoProto<proto_def::InitializeOrderIxAccounts> for InitializeOrderIxAccounts {
        fn into_proto(self) -> proto_def::InitializeOrderIxAccounts {
            proto_def::InitializeOrderIxAccounts {
                base: self.base.to_string(),
                maker: self.maker.to_string(),
                order: self.order.to_string(),
                reserve: self.reserve.to_string(),
                maker_input_account: self.maker_input_account.to_string(),
                input_mint: self.input_mint.to_string(),
                maker_output_account: self.maker_output_account.to_string(),
                referral: self.referral.map(|p| p.to_string()),
                output_mint: self.output_mint.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                rent: self.rent.to_string(),
            }
        }
    }
    use super::InitializeOrderIxData;
    impl IntoProto<proto_def::InitializeOrderIxData> for InitializeOrderIxData {
        fn into_proto(self) -> proto_def::InitializeOrderIxData {
            proto_def::InitializeOrderIxData {
                making_amount: self.making_amount,
                taking_amount: self.taking_amount,
                expired_at: self.expired_at,
            }
        }
    }
    use super::FillOrderIxAccounts;
    impl IntoProto<proto_def::FillOrderIxAccounts> for FillOrderIxAccounts {
        fn into_proto(self) -> proto_def::FillOrderIxAccounts {
            proto_def::FillOrderIxAccounts {
                order: self.order.to_string(),
                reserve: self.reserve.to_string(),
                maker: self.maker.to_string(),
                taker: self.taker.to_string(),
                taker_output_account: self.taker_output_account.to_string(),
                maker_output_account: self.maker_output_account.to_string(),
                taker_input_account: self.taker_input_account.to_string(),
                fee_authority: self.fee_authority.to_string(),
                program_fee_account: self.program_fee_account.to_string(),
                referral: self.referral.map(|p| p.to_string()),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::FillOrderIxData;
    impl IntoProto<proto_def::FillOrderIxData> for FillOrderIxData {
        fn into_proto(self) -> proto_def::FillOrderIxData {
            proto_def::FillOrderIxData {
                making_amount: self.making_amount,
                max_taking_amount: self.max_taking_amount,
            }
        }
    }
    use super::PreFlashFillOrderIxAccounts;
    impl IntoProto<proto_def::PreFlashFillOrderIxAccounts> for PreFlashFillOrderIxAccounts {
        fn into_proto(self) -> proto_def::PreFlashFillOrderIxAccounts {
            proto_def::PreFlashFillOrderIxAccounts {
                order: self.order.to_string(),
                reserve: self.reserve.to_string(),
                taker: self.taker.to_string(),
                taker_output_account: self.taker_output_account.to_string(),
                input_mint: self.input_mint.to_string(),
                input_mint_token_program: self.input_mint_token_program.to_string(),
                instruction: self.instruction.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::PreFlashFillOrderIxData;
    impl IntoProto<proto_def::PreFlashFillOrderIxData> for PreFlashFillOrderIxData {
        fn into_proto(self) -> proto_def::PreFlashFillOrderIxData {
            proto_def::PreFlashFillOrderIxData {
                making_amount: self.making_amount,
            }
        }
    }
    use super::FlashFillOrderIxAccounts;
    impl IntoProto<proto_def::FlashFillOrderIxAccounts> for FlashFillOrderIxAccounts {
        fn into_proto(self) -> proto_def::FlashFillOrderIxAccounts {
            proto_def::FlashFillOrderIxAccounts {
                order: self.order.to_string(),
                reserve: self.reserve.to_string(),
                maker: self.maker.to_string(),
                taker: self.taker.to_string(),
                maker_output_account: self.maker_output_account.to_string(),
                taker_input_account: self.taker_input_account.to_string(),
                fee_authority: self.fee_authority.to_string(),
                program_fee_account: self.program_fee_account.to_string(),
                referral: self.referral.map(|p| p.to_string()),
                input_mint: self.input_mint.to_string(),
                input_mint_token_program: self.input_mint_token_program.to_string(),
                output_mint: self.output_mint.to_string(),
                output_mint_token_program: self.output_mint_token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::FlashFillOrderIxData;
    impl IntoProto<proto_def::FlashFillOrderIxData> for FlashFillOrderIxData {
        fn into_proto(self) -> proto_def::FlashFillOrderIxData {
            proto_def::FlashFillOrderIxData {
                max_taking_amount: self.max_taking_amount,
            }
        }
    }
    use super::CancelOrderIxAccounts;
    impl IntoProto<proto_def::CancelOrderIxAccounts> for CancelOrderIxAccounts {
        fn into_proto(self) -> proto_def::CancelOrderIxAccounts {
            proto_def::CancelOrderIxAccounts {
                order: self.order.to_string(),
                reserve: self.reserve.to_string(),
                maker: self.maker.to_string(),
                maker_input_account: self.maker_input_account.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                input_mint: self.input_mint.map(|p| p.to_string()),
            }
        }
    }
    use super::CancelExpiredOrderIxAccounts;
    impl IntoProto<proto_def::CancelExpiredOrderIxAccounts> for CancelExpiredOrderIxAccounts {
        fn into_proto(self) -> proto_def::CancelExpiredOrderIxAccounts {
            proto_def::CancelExpiredOrderIxAccounts {
                order: self.order.to_string(),
                reserve: self.reserve.to_string(),
                maker: self.maker.to_string(),
                maker_input_account: self.maker_input_account.to_string(),
                system_program: self.system_program.to_string(),
                token_program: self.token_program.to_string(),
                input_mint: self.input_mint.map(|p| p.to_string()),
            }
        }
    }
    use super::WithdrawFeeIxAccounts;
    impl IntoProto<proto_def::WithdrawFeeIxAccounts> for WithdrawFeeIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawFeeIxAccounts {
            proto_def::WithdrawFeeIxAccounts {
                admin: self.admin.to_string(),
                fee_authority: self.fee_authority.to_string(),
                program_fee_account: self.program_fee_account.to_string(),
                admin_token_acocunt: self.admin_token_acocunt.to_string(),
                token_program: self.token_program.to_string(),
                mint: self.mint.to_string(),
            }
        }
    }
    use super::WithdrawFeeIxData;
    impl IntoProto<proto_def::WithdrawFeeIxData> for WithdrawFeeIxData {
        fn into_proto(self) -> proto_def::WithdrawFeeIxData {
            proto_def::WithdrawFeeIxData {
                amount: self.amount,
            }
        }
    }
    use super::InitFeeIxAccounts;
    impl IntoProto<proto_def::InitFeeIxAccounts> for InitFeeIxAccounts {
        fn into_proto(self) -> proto_def::InitFeeIxAccounts {
            proto_def::InitFeeIxAccounts {
                keeper: self.keeper.to_string(),
                fee_authority: self.fee_authority.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::InitFeeIxData;
    impl IntoProto<proto_def::InitFeeIxData> for InitFeeIxData {
        fn into_proto(self) -> proto_def::InitFeeIxData {
            proto_def::InitFeeIxData {
                maker_fee: self.maker_fee,
                maker_stable_fee: self.maker_stable_fee,
                taker_fee: self.taker_fee,
                taker_stable_fee: self.taker_stable_fee,
            }
        }
    }
    use super::UpdateFeeIxAccounts;
    impl IntoProto<proto_def::UpdateFeeIxAccounts> for UpdateFeeIxAccounts {
        fn into_proto(self) -> proto_def::UpdateFeeIxAccounts {
            proto_def::UpdateFeeIxAccounts {
                keeper: self.keeper.to_string(),
                fee_authority: self.fee_authority.to_string(),
            }
        }
    }
    use super::UpdateFeeIxData;
    impl IntoProto<proto_def::UpdateFeeIxData> for UpdateFeeIxData {
        fn into_proto(self) -> proto_def::UpdateFeeIxData {
            proto_def::UpdateFeeIxData {
                maker_fee: self.maker_fee,
                maker_stable_fee: self.maker_stable_fee,
                taker_fee: self.taker_fee,
                taker_stable_fee: self.taker_stable_fee,
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for LimitOrderProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                LimitOrderProgramIx::InitializeOrder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeOrder(
                        proto_def::InitializeOrderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::FillOrder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FillOrder(
                        proto_def::FillOrderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::PreFlashFillOrder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::PreFlashFillOrder(
                        proto_def::PreFlashFillOrderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::FlashFillOrder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FlashFillOrder(
                        proto_def::FlashFillOrderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::CancelOrder(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CancelOrder(
                        proto_def::CancelOrderIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::CancelExpiredOrder(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CancelExpiredOrder(
                        proto_def::CancelExpiredOrderIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::WithdrawFee(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::WithdrawFee(
                        proto_def::WithdrawFeeIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::InitFee(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitFee(
                        proto_def::InitFeeIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimitOrderProgramIx::UpdateFee(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateFee(
                        proto_def::UpdateFeeIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message {
            #[cfg(not(feature = "shared-data"))]
            return value.into_proto();

            #[cfg(feature = "shared-data")]
            value.parsed_ix.into_proto()
        }
    }
}
