//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::LpChangeEvent};
    impl IntoProto<proto_def::LpChangeEvent> for LpChangeEvent {
        fn into_proto(self) -> proto_def::LpChangeEvent {
            proto_def::LpChangeEvent {
                pool_id: self.pool_id.to_string(),
                lp_amount_before: self.lp_amount_before,
                token0_vault_before: self.token0_vault_before,
                token1_vault_before: self.token1_vault_before,
                token0_amount: self.token0_amount,
                token1_amount: self.token1_amount,
                token0_transfer_fee: self.token0_transfer_fee,
                token1_transfer_fee: self.token1_transfer_fee,
                change_type: self.change_type.into(),
            }
        }
    }
    use crate::types::Observation;
    impl IntoProto<proto_def::Observation> for Observation {
        fn into_proto(self) -> proto_def::Observation {
            proto_def::Observation {
                block_timestamp: self.block_timestamp,
                cumulative_token0_price_x32: self.cumulative_token0_price_x32.to_string(),
                cumulative_token1_price_x32: self.cumulative_token1_price_x32.to_string(),
            }
        }
    }
    use crate::types::SwapEvent;
    impl IntoProto<proto_def::SwapEvent> for SwapEvent {
        fn into_proto(self) -> proto_def::SwapEvent {
            match self {
                SwapEvent::V1(v1) => proto_def::SwapEvent {
                    pool_id: v1.pool_id.to_string(),
                    input_vault_before: v1.input_vault_before,
                    output_vault_before: v1.output_vault_before,
                    input_amount: v1.input_amount,
                    output_amount: v1.output_amount,
                    input_transfer_fee: v1.input_transfer_fee,
                    output_transfer_fee: v1.output_transfer_fee,
                    base_input: v1.base_input,
                    input_mint: String::new(),
                    output_mint: String::new(),
                    trade_fee: 0,
                    creator_fee: 0,
                    creator_fee_on_input: false,
                },
                SwapEvent::V2(v2) => proto_def::SwapEvent {
                    pool_id: v2.pool_id.to_string(),
                    input_vault_before: v2.input_vault_before,
                    output_vault_before: v2.output_vault_before,
                    input_amount: v2.input_amount,
                    output_amount: v2.output_amount,
                    input_transfer_fee: v2.input_transfer_fee,
                    output_transfer_fee: v2.output_transfer_fee,
                    base_input: v2.base_input,
                    input_mint: v2.input_mint.to_string(),
                    output_mint: v2.output_mint.to_string(),
                    trade_fee: v2.trade_fee,
                    creator_fee: v2.creator_fee,
                    creator_fee_on_input: v2.creator_fee_on_input,
                },
            }
        }
    }
}
