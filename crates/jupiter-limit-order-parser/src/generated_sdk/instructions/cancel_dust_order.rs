//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const CANCEL_DUST_ORDER_DISCRIMINATOR: [u8; 8] = [197, 112, 189, 164, 79, 48, 23, 246];

/// Accounts.
#[derive(Debug)]
pub struct CancelDustOrder {
    pub signer: solana_pubkey::Pubkey,

    pub maker: solana_pubkey::Pubkey,

    pub order: solana_pubkey::Pubkey,

    pub input_mint_reserve: solana_pubkey::Pubkey,

    pub maker_input_mint_account: solana_pubkey::Pubkey,

    pub input_mint: solana_pubkey::Pubkey,

    pub input_token_program: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub associated_token_program: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl CancelDustOrder {
    pub fn instruction(
        &self,
        args: CancelDustOrderInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CancelDustOrderInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.signer,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.maker, false));
        accounts.push(solana_instruction::AccountMeta::new(self.order, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.input_mint_reserve,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.maker_input_mint_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CancelDustOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CancelDustOrderInstructionData {
    discriminator: [u8; 8],
}

impl CancelDustOrderInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [197, 112, 189, 164, 79, 48, 23, 246],
        }
    }
}

impl Default for CancelDustOrderInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CancelDustOrderInstructionArgs {
    pub one_usd_input_mint_amount: u64,
}

/// Instruction builder for `CancelDustOrder`.
///
/// ### Accounts:
///
///   0. `[signer]` signer
///   1. `[writable]` maker
///   2. `[writable]` order
///   3. `[writable]` input_mint_reserve
///   4. `[writable]` maker_input_mint_account
///   5. `[]` input_mint
///   6. `[]` input_token_program
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   9. `[]` event_authority
///   10. `[]` program
#[derive(Clone, Debug, Default)]
pub struct CancelDustOrderBuilder {
    signer: Option<solana_pubkey::Pubkey>,
    maker: Option<solana_pubkey::Pubkey>,
    order: Option<solana_pubkey::Pubkey>,
    input_mint_reserve: Option<solana_pubkey::Pubkey>,
    maker_input_mint_account: Option<solana_pubkey::Pubkey>,
    input_mint: Option<solana_pubkey::Pubkey>,
    input_token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    one_usd_input_mint_amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CancelDustOrderBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: solana_pubkey::Pubkey) -> &mut Self {
        self.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: solana_pubkey::Pubkey) -> &mut Self {
        self.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint_reserve(&mut self, input_mint_reserve: solana_pubkey::Pubkey) -> &mut Self {
        self.input_mint_reserve = Some(input_mint_reserve);
        self
    }

    #[inline(always)]
    pub fn maker_input_mint_account(
        &mut self,
        maker_input_mint_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.maker_input_mint_account = Some(maker_input_mint_account);
        self
    }

    #[inline(always)]
    pub fn input_mint(&mut self, input_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn input_token_program(&mut self, input_token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.input_token_program = Some(input_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn one_usd_input_mint_amount(&mut self, one_usd_input_mint_amount: u64) -> &mut Self {
        self.one_usd_input_mint_amount = Some(one_usd_input_mint_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CancelDustOrder {
            signer: self.signer.expect("signer is not set"),
            maker: self.maker.expect("maker is not set"),
            order: self.order.expect("order is not set"),
            input_mint_reserve: self
                .input_mint_reserve
                .expect("input_mint_reserve is not set"),
            maker_input_mint_account: self
                .maker_input_mint_account
                .expect("maker_input_mint_account is not set"),
            input_mint: self.input_mint.expect("input_mint is not set"),
            input_token_program: self
                .input_token_program
                .expect("input_token_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = CancelDustOrderInstructionArgs {
            one_usd_input_mint_amount: self
                .one_usd_input_mint_amount
                .clone()
                .expect("one_usd_input_mint_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `cancel_dust_order` CPI accounts.
pub struct CancelDustOrderCpiAccounts<'a, 'b> {
    pub signer: &'b solana_account_info::AccountInfo<'a>,

    pub maker: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint_reserve: &'b solana_account_info::AccountInfo<'a>,

    pub maker_input_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `cancel_dust_order` CPI instruction.
pub struct CancelDustOrderCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub signer: &'b solana_account_info::AccountInfo<'a>,

    pub maker: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint_reserve: &'b solana_account_info::AccountInfo<'a>,

    pub maker_input_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CancelDustOrderInstructionArgs,
}

impl<'a, 'b> CancelDustOrderCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CancelDustOrderCpiAccounts<'a, 'b>,
        args: CancelDustOrderInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            maker: accounts.maker,
            order: accounts.order,
            input_mint_reserve: accounts.input_mint_reserve,
            maker_input_mint_account: accounts.maker_input_mint_account,
            input_mint: accounts.input_mint,
            input_token_program: accounts.input_token_program,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.maker.key, false));
        accounts.push(solana_instruction::AccountMeta::new(*self.order.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.input_mint_reserve.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.maker_input_mint_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CancelDustOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.maker.clone());
        account_infos.push(self.order.clone());
        account_infos.push(self.input_mint_reserve.clone());
        account_infos.push(self.maker_input_mint_account.clone());
        account_infos.push(self.input_mint.clone());
        account_infos.push(self.input_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CancelDustOrder` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` signer
///   1. `[writable]` maker
///   2. `[writable]` order
///   3. `[writable]` input_mint_reserve
///   4. `[writable]` maker_input_mint_account
///   5. `[]` input_mint
///   6. `[]` input_token_program
///   7. `[]` system_program
///   8. `[]` associated_token_program
///   9. `[]` event_authority
///   10. `[]` program
#[derive(Clone, Debug)]
pub struct CancelDustOrderCpiBuilder<'a, 'b> {
    instruction: Box<CancelDustOrderCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CancelDustOrderCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CancelDustOrderCpiBuilderInstruction {
            __program: program,
            signer: None,
            maker: None,
            order: None,
            input_mint_reserve: None,
            maker_input_mint_account: None,
            input_mint: None,
            input_token_program: None,
            system_program: None,
            associated_token_program: None,
            event_authority: None,
            program: None,
            one_usd_input_mint_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint_reserve(
        &mut self,
        input_mint_reserve: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint_reserve = Some(input_mint_reserve);
        self
    }

    #[inline(always)]
    pub fn maker_input_mint_account(
        &mut self,
        maker_input_mint_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.maker_input_mint_account = Some(maker_input_mint_account);
        self
    }

    #[inline(always)]
    pub fn input_mint(
        &mut self,
        input_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn input_token_program(
        &mut self,
        input_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_program = Some(input_token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn one_usd_input_mint_amount(&mut self, one_usd_input_mint_amount: u64) -> &mut Self {
        self.instruction.one_usd_input_mint_amount = Some(one_usd_input_mint_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = CancelDustOrderInstructionArgs {
            one_usd_input_mint_amount: self
                .instruction
                .one_usd_input_mint_amount
                .clone()
                .expect("one_usd_input_mint_amount is not set"),
        };
        let instruction = CancelDustOrderCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            maker: self.instruction.maker.expect("maker is not set"),

            order: self.instruction.order.expect("order is not set"),

            input_mint_reserve: self
                .instruction
                .input_mint_reserve
                .expect("input_mint_reserve is not set"),

            maker_input_mint_account: self
                .instruction
                .maker_input_mint_account
                .expect("maker_input_mint_account is not set"),

            input_mint: self.instruction.input_mint.expect("input_mint is not set"),

            input_token_program: self
                .instruction
                .input_token_program
                .expect("input_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CancelDustOrderCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker: Option<&'b solana_account_info::AccountInfo<'a>>,
    order: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_mint_reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker_input_mint_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    one_usd_input_mint_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
