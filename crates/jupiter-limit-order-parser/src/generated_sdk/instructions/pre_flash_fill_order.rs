//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const PRE_FLASH_FILL_ORDER_DISCRIMINATOR: [u8; 8] = [240, 47, 153, 68, 13, 190, 225, 42];

/// Accounts.
#[derive(Debug)]
pub struct PreFlashFillOrder {
    pub taker: solana_pubkey::Pubkey,

    pub order: solana_pubkey::Pubkey,

    pub input_mint_reserve: solana_pubkey::Pubkey,

    pub taker_input_mint_account: solana_pubkey::Pubkey,

    pub input_mint: solana_pubkey::Pubkey,

    pub input_token_program: solana_pubkey::Pubkey,

    pub instruction: solana_pubkey::Pubkey,
}

impl PreFlashFillOrder {
    pub fn instruction(
        &self,
        args: PreFlashFillOrderInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: PreFlashFillOrderInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.taker, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.order, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.input_mint_reserve,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.taker_input_mint_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&PreFlashFillOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PreFlashFillOrderInstructionData {
    discriminator: [u8; 8],
}

impl PreFlashFillOrderInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [240, 47, 153, 68, 13, 190, 225, 42],
        }
    }
}

impl Default for PreFlashFillOrderInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PreFlashFillOrderInstructionArgs {
    pub making_amount: u64,
}

/// Instruction builder for `PreFlashFillOrder`.
///
/// ### Accounts:
///
///   0. `[signer]` taker
///   1. `[writable]` order
///   2. `[writable]` input_mint_reserve
///   3. `[writable]` taker_input_mint_account
///   4. `[]` input_mint
///   5. `[]` input_token_program
///   6. `[optional]` instruction (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct PreFlashFillOrderBuilder {
    taker: Option<solana_pubkey::Pubkey>,
    order: Option<solana_pubkey::Pubkey>,
    input_mint_reserve: Option<solana_pubkey::Pubkey>,
    taker_input_mint_account: Option<solana_pubkey::Pubkey>,
    input_mint: Option<solana_pubkey::Pubkey>,
    input_token_program: Option<solana_pubkey::Pubkey>,
    instruction: Option<solana_pubkey::Pubkey>,
    making_amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl PreFlashFillOrderBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn taker(&mut self, taker: solana_pubkey::Pubkey) -> &mut Self {
        self.taker = Some(taker);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: solana_pubkey::Pubkey) -> &mut Self {
        self.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint_reserve(&mut self, input_mint_reserve: solana_pubkey::Pubkey) -> &mut Self {
        self.input_mint_reserve = Some(input_mint_reserve);
        self
    }

    #[inline(always)]
    pub fn taker_input_mint_account(
        &mut self,
        taker_input_mint_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.taker_input_mint_account = Some(taker_input_mint_account);
        self
    }

    #[inline(always)]
    pub fn input_mint(&mut self, input_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn input_token_program(&mut self, input_token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.input_token_program = Some(input_token_program);
        self
    }

    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    #[inline(always)]
    pub fn instruction_field(&mut self, instruction: solana_pubkey::Pubkey) -> &mut Self {
        self.instruction = Some(instruction);
        self
    }

    #[inline(always)]
    pub fn making_amount(&mut self, making_amount: u64) -> &mut Self {
        self.making_amount = Some(making_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = PreFlashFillOrder {
            taker: self.taker.expect("taker is not set"),
            order: self.order.expect("order is not set"),
            input_mint_reserve: self
                .input_mint_reserve
                .expect("input_mint_reserve is not set"),
            taker_input_mint_account: self
                .taker_input_mint_account
                .expect("taker_input_mint_account is not set"),
            input_mint: self.input_mint.expect("input_mint is not set"),
            input_token_program: self
                .input_token_program
                .expect("input_token_program is not set"),
            instruction: self.instruction.unwrap_or(solana_pubkey::pubkey!(
                "Sysvar1nstructions1111111111111111111111111"
            )),
        };
        let args = PreFlashFillOrderInstructionArgs {
            making_amount: self
                .making_amount
                .clone()
                .expect("making_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `pre_flash_fill_order` CPI accounts.
pub struct PreFlashFillOrderCpiAccounts<'a, 'b> {
    pub taker: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint_reserve: &'b solana_account_info::AccountInfo<'a>,

    pub taker_input_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub instruction: &'b solana_account_info::AccountInfo<'a>,
}

/// `pre_flash_fill_order` CPI instruction.
pub struct PreFlashFillOrderCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub taker: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint_reserve: &'b solana_account_info::AccountInfo<'a>,

    pub taker_input_mint_account: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub instruction: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: PreFlashFillOrderInstructionArgs,
}

impl<'a, 'b> PreFlashFillOrderCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: PreFlashFillOrderCpiAccounts<'a, 'b>,
        args: PreFlashFillOrderInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            taker: accounts.taker,
            order: accounts.order,
            input_mint_reserve: accounts.input_mint_reserve,
            taker_input_mint_account: accounts.taker_input_mint_account,
            input_mint: accounts.input_mint,
            input_token_program: accounts.input_token_program,
            instruction: accounts.instruction,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.taker.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.order.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.input_mint_reserve.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.taker_input_mint_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&PreFlashFillOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LIMIT_ORDER2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.taker.clone());
        account_infos.push(self.order.clone());
        account_infos.push(self.input_mint_reserve.clone());
        account_infos.push(self.taker_input_mint_account.clone());
        account_infos.push(self.input_mint.clone());
        account_infos.push(self.input_token_program.clone());
        account_infos.push(self.instruction.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PreFlashFillOrder` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` taker
///   1. `[writable]` order
///   2. `[writable]` input_mint_reserve
///   3. `[writable]` taker_input_mint_account
///   4. `[]` input_mint
///   5. `[]` input_token_program
///   6. `[]` instruction
#[derive(Clone, Debug)]
pub struct PreFlashFillOrderCpiBuilder<'a, 'b> {
    instruction: Box<PreFlashFillOrderCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PreFlashFillOrderCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PreFlashFillOrderCpiBuilderInstruction {
            __program: program,
            taker: None,
            order: None,
            input_mint_reserve: None,
            taker_input_mint_account: None,
            input_mint: None,
            input_token_program: None,
            instruction: None,
            making_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn taker(&mut self, taker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.taker = Some(taker);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint_reserve(
        &mut self,
        input_mint_reserve: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint_reserve = Some(input_mint_reserve);
        self
    }

    #[inline(always)]
    pub fn taker_input_mint_account(
        &mut self,
        taker_input_mint_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.taker_input_mint_account = Some(taker_input_mint_account);
        self
    }

    #[inline(always)]
    pub fn input_mint(
        &mut self,
        input_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn input_token_program(
        &mut self,
        input_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_program = Some(input_token_program);
        self
    }

    #[inline(always)]
    pub fn instruction(
        &mut self,
        instruction: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.instruction = Some(instruction);
        self
    }

    #[inline(always)]
    pub fn making_amount(&mut self, making_amount: u64) -> &mut Self {
        self.instruction.making_amount = Some(making_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = PreFlashFillOrderInstructionArgs {
            making_amount: self
                .instruction
                .making_amount
                .clone()
                .expect("making_amount is not set"),
        };
        let instruction = PreFlashFillOrderCpi {
            __program: self.instruction.__program,

            taker: self.instruction.taker.expect("taker is not set"),

            order: self.instruction.order.expect("order is not set"),

            input_mint_reserve: self
                .instruction
                .input_mint_reserve
                .expect("input_mint_reserve is not set"),

            taker_input_mint_account: self
                .instruction
                .taker_input_mint_account
                .expect("taker_input_mint_account is not set"),

            input_mint: self.instruction.input_mint.expect("input_mint is not set"),

            input_token_program: self
                .instruction
                .input_token_program
                .expect("input_token_program is not set"),

            instruction: self
                .instruction
                .instruction
                .expect("instruction is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PreFlashFillOrderCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    taker: Option<&'b solana_account_info::AccountInfo<'a>>,
    order: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_mint_reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
    taker_input_mint_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    instruction: Option<&'b solana_account_info::AccountInfo<'a>>,
    making_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
