//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializeOrder {
    pub payer: solana_program::pubkey::Pubkey,

    pub maker: solana_program::pubkey::Pubkey,

    pub order: solana_program::pubkey::Pubkey,

    pub input_mint_reserve: solana_program::pubkey::Pubkey,

    pub maker_input_mint_account: solana_program::pubkey::Pubkey,

    pub fee: solana_program::pubkey::Pubkey,

    pub referral: Option<solana_program::pubkey::Pubkey>,

    pub input_mint: solana_program::pubkey::Pubkey,

    pub output_mint: solana_program::pubkey::Pubkey,

    pub input_token_program: solana_program::pubkey::Pubkey,

    pub output_token_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl InitializeOrder {
    pub fn instruction(
        &self,
        args: InitializeOrderInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeOrderInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.maker, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.order, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_mint_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.maker_input_mint_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee, false,
        ));
        if let Some(referral) = self.referral {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                referral, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LIMIT_ORDER2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::LIMIT_ORDER2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeOrderInstructionData {
    discriminator: [u8; 8],
}

impl InitializeOrderInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [133, 110, 74, 175, 112, 159, 245, 159],
        }
    }
}

impl Default for InitializeOrderInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeOrderInstructionArgs {
    pub unique_id: u64,
    pub making_amount: u64,
    pub taking_amount: u64,
    pub expired_at: Option<i64>,
    pub fee_bps: Option<u16>,
    pub slippage_bps: Option<u16>,
}

/// Instruction builder for `InitializeOrder`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` maker
///   2. `[writable]` order
///   3. `[writable]` input_mint_reserve
///   4. `[writable]` maker_input_mint_account
///   5. `[]` fee
///   6. `[optional]` referral
///   7. `[]` input_mint
///   8. `[]` output_mint
///   9. `[]` input_token_program
///   10. `[]` output_token_program
///   11. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   12. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   13. `[]` event_authority
///   14. `[]` program
#[derive(Clone, Debug, Default)]
pub struct InitializeOrderBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    maker: Option<solana_program::pubkey::Pubkey>,
    order: Option<solana_program::pubkey::Pubkey>,
    input_mint_reserve: Option<solana_program::pubkey::Pubkey>,
    maker_input_mint_account: Option<solana_program::pubkey::Pubkey>,
    fee: Option<solana_program::pubkey::Pubkey>,
    referral: Option<solana_program::pubkey::Pubkey>,
    input_mint: Option<solana_program::pubkey::Pubkey>,
    output_mint: Option<solana_program::pubkey::Pubkey>,
    input_token_program: Option<solana_program::pubkey::Pubkey>,
    output_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    unique_id: Option<u64>,
    making_amount: Option<u64>,
    taking_amount: Option<u64>,
    expired_at: Option<i64>,
    fee_bps: Option<u16>,
    slippage_bps: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeOrderBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: solana_program::pubkey::Pubkey) -> &mut Self {
        self.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: solana_program::pubkey::Pubkey) -> &mut Self {
        self.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint_reserve(
        &mut self,
        input_mint_reserve: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_mint_reserve = Some(input_mint_reserve);
        self
    }

    #[inline(always)]
    pub fn maker_input_mint_account(
        &mut self,
        maker_input_mint_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.maker_input_mint_account = Some(maker_input_mint_account);
        self
    }

    #[inline(always)]
    pub fn fee(&mut self, fee: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee = Some(fee);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn referral(&mut self, referral: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.referral = referral;
        self
    }

    #[inline(always)]
    pub fn input_mint(&mut self, input_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn output_mint(&mut self, output_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.output_mint = Some(output_mint);
        self
    }

    #[inline(always)]
    pub fn input_token_program(
        &mut self,
        input_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_program = Some(input_token_program);
        self
    }

    #[inline(always)]
    pub fn output_token_program(
        &mut self,
        output_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_program = Some(output_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn unique_id(&mut self, unique_id: u64) -> &mut Self {
        self.unique_id = Some(unique_id);
        self
    }

    #[inline(always)]
    pub fn making_amount(&mut self, making_amount: u64) -> &mut Self {
        self.making_amount = Some(making_amount);
        self
    }

    #[inline(always)]
    pub fn taking_amount(&mut self, taking_amount: u64) -> &mut Self {
        self.taking_amount = Some(taking_amount);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn expired_at(&mut self, expired_at: i64) -> &mut Self {
        self.expired_at = Some(expired_at);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn fee_bps(&mut self, fee_bps: u16) -> &mut Self {
        self.fee_bps = Some(fee_bps);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn slippage_bps(&mut self, slippage_bps: u16) -> &mut Self {
        self.slippage_bps = Some(slippage_bps);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeOrder {
            payer: self.payer.expect("payer is not set"),
            maker: self.maker.expect("maker is not set"),
            order: self.order.expect("order is not set"),
            input_mint_reserve: self
                .input_mint_reserve
                .expect("input_mint_reserve is not set"),
            maker_input_mint_account: self
                .maker_input_mint_account
                .expect("maker_input_mint_account is not set"),
            fee: self.fee.expect("fee is not set"),
            referral: self.referral,
            input_mint: self.input_mint.expect("input_mint is not set"),
            output_mint: self.output_mint.expect("output_mint is not set"),
            input_token_program: self
                .input_token_program
                .expect("input_token_program is not set"),
            output_token_program: self
                .output_token_program
                .expect("output_token_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = InitializeOrderInstructionArgs {
            unique_id: self.unique_id.clone().expect("unique_id is not set"),
            making_amount: self
                .making_amount
                .clone()
                .expect("making_amount is not set"),
            taking_amount: self
                .taking_amount
                .clone()
                .expect("taking_amount is not set"),
            expired_at: self.expired_at.clone(),
            fee_bps: self.fee_bps.clone(),
            slippage_bps: self.slippage_bps.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_order` CPI accounts.
pub struct InitializeOrderCpiAccounts<'a, 'b> {
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub maker: &'b solana_program::account_info::AccountInfo<'a>,

    pub order: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_mint_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub maker_input_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub referral: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub input_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_order` CPI instruction.
pub struct InitializeOrderCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub maker: &'b solana_program::account_info::AccountInfo<'a>,

    pub order: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_mint_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub maker_input_mint_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub referral: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub input_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeOrderInstructionArgs,
}

impl<'a, 'b> InitializeOrderCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeOrderCpiAccounts<'a, 'b>,
        args: InitializeOrderInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            maker: accounts.maker,
            order: accounts.order,
            input_mint_reserve: accounts.input_mint_reserve,
            maker_input_mint_account: accounts.maker_input_mint_account,
            fee: accounts.fee,
            referral: accounts.referral,
            input_mint: accounts.input_mint,
            output_mint: accounts.output_mint,
            input_token_program: accounts.input_token_program,
            output_token_program: accounts.output_token_program,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.maker.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.order.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_mint_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.maker_input_mint_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee.key,
            false,
        ));
        if let Some(referral) = self.referral {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *referral.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LIMIT_ORDER2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::LIMIT_ORDER2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.maker.clone());
        account_infos.push(self.order.clone());
        account_infos.push(self.input_mint_reserve.clone());
        account_infos.push(self.maker_input_mint_account.clone());
        account_infos.push(self.fee.clone());
        if let Some(referral) = self.referral {
            account_infos.push(referral.clone());
        }
        account_infos.push(self.input_mint.clone());
        account_infos.push(self.output_mint.clone());
        account_infos.push(self.input_token_program.clone());
        account_infos.push(self.output_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeOrder` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` maker
///   2. `[writable]` order
///   3. `[writable]` input_mint_reserve
///   4. `[writable]` maker_input_mint_account
///   5. `[]` fee
///   6. `[optional]` referral
///   7. `[]` input_mint
///   8. `[]` output_mint
///   9. `[]` input_token_program
///   10. `[]` output_token_program
///   11. `[]` system_program
///   12. `[]` associated_token_program
///   13. `[]` event_authority
///   14. `[]` program
#[derive(Clone, Debug)]
pub struct InitializeOrderCpiBuilder<'a, 'b> {
    instruction: Box<InitializeOrderCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeOrderCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeOrderCpiBuilderInstruction {
            __program: program,
            payer: None,
            maker: None,
            order: None,
            input_mint_reserve: None,
            maker_input_mint_account: None,
            fee: None,
            referral: None,
            input_mint: None,
            output_mint: None,
            input_token_program: None,
            output_token_program: None,
            system_program: None,
            associated_token_program: None,
            event_authority: None,
            program: None,
            unique_id: None,
            making_amount: None,
            taking_amount: None,
            expired_at: None,
            fee_bps: None,
            slippage_bps: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint_reserve(
        &mut self,
        input_mint_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint_reserve = Some(input_mint_reserve);
        self
    }

    #[inline(always)]
    pub fn maker_input_mint_account(
        &mut self,
        maker_input_mint_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.maker_input_mint_account = Some(maker_input_mint_account);
        self
    }

    #[inline(always)]
    pub fn fee(&mut self, fee: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fee = Some(fee);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn referral(
        &mut self,
        referral: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referral = referral;
        self
    }

    #[inline(always)]
    pub fn input_mint(
        &mut self,
        input_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn output_mint(
        &mut self,
        output_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_mint = Some(output_mint);
        self
    }

    #[inline(always)]
    pub fn input_token_program(
        &mut self,
        input_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_program = Some(input_token_program);
        self
    }

    #[inline(always)]
    pub fn output_token_program(
        &mut self,
        output_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_program = Some(output_token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn unique_id(&mut self, unique_id: u64) -> &mut Self {
        self.instruction.unique_id = Some(unique_id);
        self
    }

    #[inline(always)]
    pub fn making_amount(&mut self, making_amount: u64) -> &mut Self {
        self.instruction.making_amount = Some(making_amount);
        self
    }

    #[inline(always)]
    pub fn taking_amount(&mut self, taking_amount: u64) -> &mut Self {
        self.instruction.taking_amount = Some(taking_amount);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn expired_at(&mut self, expired_at: i64) -> &mut Self {
        self.instruction.expired_at = Some(expired_at);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn fee_bps(&mut self, fee_bps: u16) -> &mut Self {
        self.instruction.fee_bps = Some(fee_bps);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn slippage_bps(&mut self, slippage_bps: u16) -> &mut Self {
        self.instruction.slippage_bps = Some(slippage_bps);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeOrderInstructionArgs {
            unique_id: self
                .instruction
                .unique_id
                .clone()
                .expect("unique_id is not set"),
            making_amount: self
                .instruction
                .making_amount
                .clone()
                .expect("making_amount is not set"),
            taking_amount: self
                .instruction
                .taking_amount
                .clone()
                .expect("taking_amount is not set"),
            expired_at: self.instruction.expired_at.clone(),
            fee_bps: self.instruction.fee_bps.clone(),
            slippage_bps: self.instruction.slippage_bps.clone(),
        };
        let instruction = InitializeOrderCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            maker: self.instruction.maker.expect("maker is not set"),

            order: self.instruction.order.expect("order is not set"),

            input_mint_reserve: self
                .instruction
                .input_mint_reserve
                .expect("input_mint_reserve is not set"),

            maker_input_mint_account: self
                .instruction
                .maker_input_mint_account
                .expect("maker_input_mint_account is not set"),

            fee: self.instruction.fee.expect("fee is not set"),

            referral: self.instruction.referral,

            input_mint: self.instruction.input_mint.expect("input_mint is not set"),

            output_mint: self
                .instruction
                .output_mint
                .expect("output_mint is not set"),

            input_token_program: self
                .instruction
                .input_token_program
                .expect("input_token_program is not set"),

            output_token_program: self
                .instruction
                .output_token_program
                .expect("output_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeOrderCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    order: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_mint_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker_input_mint_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referral: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    unique_id: Option<u64>,
    making_amount: Option<u64>,
    taking_amount: Option<u64>,
    expired_at: Option<i64>,
    fee_bps: Option<u16>,
    slippage_bps: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
