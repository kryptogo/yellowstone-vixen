//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::CancelDustOrderEvent};
    impl IntoProto<proto_def::CancelDustOrderEvent> for CancelDustOrderEvent {
        fn into_proto(self) -> proto_def::CancelDustOrderEvent {
            proto_def::CancelDustOrderEvent {
                order_key: self.order_key.to_string(),
                one_usd_input_mint_amount: self.one_usd_input_mint_amount,
            }
        }
    }
    use crate::types::CancelOrderEvent;
    impl IntoProto<proto_def::CancelOrderEvent> for CancelOrderEvent {
        fn into_proto(self) -> proto_def::CancelOrderEvent {
            proto_def::CancelOrderEvent {
                order_key: self.order_key.to_string(),
            }
        }
    }
    use crate::types::CreateOrderEvent;
    impl IntoProto<proto_def::CreateOrderEvent> for CreateOrderEvent {
        fn into_proto(self) -> proto_def::CreateOrderEvent {
            proto_def::CreateOrderEvent {
                order_key: self.order_key.to_string(),
                maker: self.maker.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_token_program: self.input_token_program.to_string(),
                output_token_program: self.output_token_program.to_string(),
                making_amount: self.making_amount,
                taking_amount: self.taking_amount,
                expired_at: self.expired_at,
                fee_bps: self.fee_bps.into(),
                fee_account: self.fee_account.to_string(),
                slippage_bps: self.slippage_bps.into(),
            }
        }
    }
    use crate::types::TradeEvent;
    impl IntoProto<proto_def::TradeEvent> for TradeEvent {
        fn into_proto(self) -> proto_def::TradeEvent {
            proto_def::TradeEvent {
                order_key: self.order_key.to_string(),
                taker: self.taker.to_string(),
                remaining_making_amount: self.remaining_making_amount,
                remaining_taking_amount: self.remaining_taking_amount,
                making_amount: self.making_amount,
                taking_amount: self.taking_amount,
            }
        }
    }
}
