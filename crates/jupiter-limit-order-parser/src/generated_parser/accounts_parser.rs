//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::accounts::Fee;
use crate::accounts::Order;
use crate::ID;

/// LimitOrder2 Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LimitOrder2ProgramState {
    Fee(Fee),
    Order(Order),
}

impl LimitOrder2ProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [24, 55, 150, 250, 168, 27, 101, 178] => {
                Ok(LimitOrder2ProgramState::Fee(Fee::from_bytes(data_bytes)?))
            },
            [134, 173, 223, 185, 77, 86, 28, 51] => Ok(LimitOrder2ProgramState::Order(
                Order::from_bytes(data_bytes)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = LimitOrder2ProgramState;

    fn id(&self) -> std::borrow::Cow<'static, str> {
        "limit_order2::AccountParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        LimitOrder2ProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use super::{AccountParser, LimitOrder2ProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    use yellowstone_vixen_core::proto::ParseProto;

    use super::Fee;
    impl IntoProto<proto_def::Fee> for Fee {
        fn into_proto(self) -> proto_def::Fee {
            proto_def::Fee {
                normal_fee_bps: self.normal_fee_bps.into(),
                stable_fee_bps: self.stable_fee_bps.into(),
            }
        }
    }
    use super::Order;
    impl IntoProto<proto_def::Order> for Order {
        fn into_proto(self) -> proto_def::Order {
            proto_def::Order {
                maker: self.maker.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_token_program: self.input_token_program.to_string(),
                output_token_program: self.output_token_program.to_string(),
                input_mint_reserve: self.input_mint_reserve.to_string(),
                unique_id: self.unique_id,
                ori_making_amount: self.ori_making_amount,
                ori_taking_amount: self.ori_taking_amount,
                making_amount: self.making_amount,
                taking_amount: self.taking_amount,
                borrow_making_amount: self.borrow_making_amount,
                expired_at: self.expired_at,
                fee_bps: self.fee_bps.into(),
                fee_account: self.fee_account.to_string(),
                created_at: self.created_at,
                updated_at: self.updated_at,
                bump: self.bump.into(),
                slippage_bps: self.slippage_bps.into(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for LimitOrder2ProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                LimitOrder2ProgramState::Fee(data) => {
                    proto_def::program_state::StateOneof::Fee(data.into_proto())
                },
                LimitOrder2ProgramState::Order(data) => {
                    proto_def::program_state::StateOneof::Order(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message {
            value.into_proto()
        }
    }
}
