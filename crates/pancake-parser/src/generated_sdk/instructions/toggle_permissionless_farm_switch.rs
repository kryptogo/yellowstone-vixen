//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const TOGGLE_PERMISSIONLESS_FARM_SWITCH_DISCRIMINATOR: [u8; 8] =
    [150, 112, 54, 233, 238, 161, 7, 86];

/// Accounts.
#[derive(Debug)]
pub struct TogglePermissionlessFarmSwitch {
    pub owner: solana_pubkey::Pubkey,

    pub permissionless_farm_switch: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl TogglePermissionlessFarmSwitch {
    pub fn instruction(
        &self,
        args: TogglePermissionlessFarmSwitchInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: TogglePermissionlessFarmSwitchInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.owner, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.permissionless_farm_switch,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&TogglePermissionlessFarmSwitchInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TogglePermissionlessFarmSwitchInstructionData {
    discriminator: [u8; 8],
}

impl TogglePermissionlessFarmSwitchInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [150, 112, 54, 233, 238, 161, 7, 86],
        }
    }
}

impl Default for TogglePermissionlessFarmSwitchInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TogglePermissionlessFarmSwitchInstructionArgs {
    pub is_on: bool,
}

/// Instruction builder for `TogglePermissionlessFarmSwitch`.
///
/// ### Accounts:
///
///   0. `[writable, signer, optional]` owner (default to `DmwXqqK5Zuj619au6q2Jx3TMr9ZV1837uxJcEwyvXVtV`)
///   1. `[writable]` permissionless_farm_switch
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct TogglePermissionlessFarmSwitchBuilder {
    owner: Option<solana_pubkey::Pubkey>,
    permissionless_farm_switch: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    is_on: Option<bool>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl TogglePermissionlessFarmSwitchBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// `[optional account, default to 'DmwXqqK5Zuj619au6q2Jx3TMr9ZV1837uxJcEwyvXVtV']`
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn permissionless_farm_switch(
        &mut self,
        permissionless_farm_switch: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.permissionless_farm_switch = Some(permissionless_farm_switch);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn is_on(&mut self, is_on: bool) -> &mut Self {
        self.is_on = Some(is_on);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = TogglePermissionlessFarmSwitch {
            owner: self.owner.unwrap_or(solana_pubkey::pubkey!(
                "DmwXqqK5Zuj619au6q2Jx3TMr9ZV1837uxJcEwyvXVtV"
            )),
            permissionless_farm_switch: self
                .permissionless_farm_switch
                .expect("permissionless_farm_switch is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = TogglePermissionlessFarmSwitchInstructionArgs {
            is_on: self.is_on.clone().expect("is_on is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `toggle_permissionless_farm_switch` CPI accounts.
pub struct TogglePermissionlessFarmSwitchCpiAccounts<'a, 'b> {
    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub permissionless_farm_switch: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `toggle_permissionless_farm_switch` CPI instruction.
pub struct TogglePermissionlessFarmSwitchCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub permissionless_farm_switch: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: TogglePermissionlessFarmSwitchInstructionArgs,
}

impl<'a, 'b> TogglePermissionlessFarmSwitchCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: TogglePermissionlessFarmSwitchCpiAccounts<'a, 'b>,
        args: TogglePermissionlessFarmSwitchInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            permissionless_farm_switch: accounts.permissionless_farm_switch,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.owner.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.permissionless_farm_switch.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&TogglePermissionlessFarmSwitchInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.permissionless_farm_switch.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TogglePermissionlessFarmSwitch` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[writable]` permissionless_farm_switch
///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct TogglePermissionlessFarmSwitchCpiBuilder<'a, 'b> {
    instruction: Box<TogglePermissionlessFarmSwitchCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TogglePermissionlessFarmSwitchCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TogglePermissionlessFarmSwitchCpiBuilderInstruction {
            __program: program,
            owner: None,
            permissionless_farm_switch: None,
            system_program: None,
            is_on: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn permissionless_farm_switch(
        &mut self,
        permissionless_farm_switch: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.permissionless_farm_switch = Some(permissionless_farm_switch);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn is_on(&mut self, is_on: bool) -> &mut Self {
        self.instruction.is_on = Some(is_on);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = TogglePermissionlessFarmSwitchInstructionArgs {
            is_on: self.instruction.is_on.clone().expect("is_on is not set"),
        };
        let instruction = TogglePermissionlessFarmSwitchCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            permissionless_farm_switch: self
                .instruction
                .permissionless_farm_switch
                .expect("permissionless_farm_switch is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TogglePermissionlessFarmSwitchCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    permissionless_farm_switch: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    is_on: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
