//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::CollectPersonalFeeEvent};
    impl IntoProto<proto_def::CollectPersonalFeeEvent> for CollectPersonalFeeEvent {
        fn into_proto(self) -> proto_def::CollectPersonalFeeEvent {
            proto_def::CollectPersonalFeeEvent {
                position_nft_mint: self.position_nft_mint.to_string(),
                recipient_token_account0: self.recipient_token_account0.to_string(),
                recipient_token_account1: self.recipient_token_account1.to_string(),
                amount0: self.amount0,
                amount1: self.amount1,
            }
        }
    }
    use crate::types::CollectProtocolFeeEvent;
    impl IntoProto<proto_def::CollectProtocolFeeEvent> for CollectProtocolFeeEvent {
        fn into_proto(self) -> proto_def::CollectProtocolFeeEvent {
            proto_def::CollectProtocolFeeEvent {
                pool_state: self.pool_state.to_string(),
                recipient_token_account0: self.recipient_token_account0.to_string(),
                recipient_token_account1: self.recipient_token_account1.to_string(),
                amount0: self.amount0,
                amount1: self.amount1,
            }
        }
    }
    use crate::types::ConfigChangeEvent;
    impl IntoProto<proto_def::ConfigChangeEvent> for ConfigChangeEvent {
        fn into_proto(self) -> proto_def::ConfigChangeEvent {
            proto_def::ConfigChangeEvent {
                index: self.index.into(),
                owner: self.owner.to_string(),
                protocol_fee_rate: self.protocol_fee_rate,
                trade_fee_rate: self.trade_fee_rate,
                tick_spacing: self.tick_spacing.into(),
                fund_fee_rate: self.fund_fee_rate,
                fund_owner: self.fund_owner.to_string(),
            }
        }
    }
    use crate::types::CreatePersonalPositionEvent;
    impl IntoProto<proto_def::CreatePersonalPositionEvent> for CreatePersonalPositionEvent {
        fn into_proto(self) -> proto_def::CreatePersonalPositionEvent {
            proto_def::CreatePersonalPositionEvent {
                pool_state: self.pool_state.to_string(),
                minter: self.minter.to_string(),
                nft_owner: self.nft_owner.to_string(),
                tick_lower_index: self.tick_lower_index,
                tick_upper_index: self.tick_upper_index,
                liquidity: self.liquidity.to_string(),
                deposit_amount0: self.deposit_amount0,
                deposit_amount1: self.deposit_amount1,
                deposit_amount0_transfer_fee: self.deposit_amount0_transfer_fee,
                deposit_amount1_transfer_fee: self.deposit_amount1_transfer_fee,
            }
        }
    }
    use crate::types::DecreaseLiquidityEvent;
    impl IntoProto<proto_def::DecreaseLiquidityEvent> for DecreaseLiquidityEvent {
        fn into_proto(self) -> proto_def::DecreaseLiquidityEvent {
            proto_def::DecreaseLiquidityEvent {
                position_nft_mint: self.position_nft_mint.to_string(),
                liquidity: self.liquidity.to_string(),
                decrease_amount0: self.decrease_amount0,
                decrease_amount1: self.decrease_amount1,
                fee_amount0: self.fee_amount0,
                fee_amount1: self.fee_amount1,
                reward_amounts: self.reward_amounts.to_vec(),
                transfer_fee0: self.transfer_fee0,
                transfer_fee1: self.transfer_fee1,
            }
        }
    }
    use crate::types::IncreaseLiquidityEvent;
    impl IntoProto<proto_def::IncreaseLiquidityEvent> for IncreaseLiquidityEvent {
        fn into_proto(self) -> proto_def::IncreaseLiquidityEvent {
            proto_def::IncreaseLiquidityEvent {
                position_nft_mint: self.position_nft_mint.to_string(),
                liquidity: self.liquidity.to_string(),
                amount0: self.amount0,
                amount1: self.amount1,
                amount0_transfer_fee: self.amount0_transfer_fee,
                amount1_transfer_fee: self.amount1_transfer_fee,
            }
        }
    }
    use crate::types::LiquidityCalculateEvent;
    impl IntoProto<proto_def::LiquidityCalculateEvent> for LiquidityCalculateEvent {
        fn into_proto(self) -> proto_def::LiquidityCalculateEvent {
            proto_def::LiquidityCalculateEvent {
                pool_liquidity: self.pool_liquidity.to_string(),
                pool_sqrt_price_x64: self.pool_sqrt_price_x64.to_string(),
                pool_tick: self.pool_tick,
                calc_amount0: self.calc_amount0,
                calc_amount1: self.calc_amount1,
                trade_fee_owed0: self.trade_fee_owed0,
                trade_fee_owed1: self.trade_fee_owed1,
                transfer_fee0: self.transfer_fee0,
                transfer_fee1: self.transfer_fee1,
            }
        }
    }
    use crate::types::LiquidityChangeEvent;
    impl IntoProto<proto_def::LiquidityChangeEvent> for LiquidityChangeEvent {
        fn into_proto(self) -> proto_def::LiquidityChangeEvent {
            proto_def::LiquidityChangeEvent {
                pool_state: self.pool_state.to_string(),
                tick: self.tick,
                tick_lower: self.tick_lower,
                tick_upper: self.tick_upper,
                liquidity_before: self.liquidity_before.to_string(),
                liquidity_after: self.liquidity_after.to_string(),
            }
        }
    }
    use crate::types::Observation;
    impl IntoProto<proto_def::Observation> for Observation {
        fn into_proto(self) -> proto_def::Observation {
            proto_def::Observation {
                block_timestamp: self.block_timestamp,
                tick_cumulative: self.tick_cumulative,
                padding: self.padding.to_vec(),
            }
        }
    }
    use crate::types::PoolCreatedEvent;
    impl IntoProto<proto_def::PoolCreatedEvent> for PoolCreatedEvent {
        fn into_proto(self) -> proto_def::PoolCreatedEvent {
            proto_def::PoolCreatedEvent {
                token_mint0: self.token_mint0.to_string(),
                token_mint1: self.token_mint1.to_string(),
                tick_spacing: self.tick_spacing.into(),
                pool_state: self.pool_state.to_string(),
                sqrt_price_x64: self.sqrt_price_x64.to_string(),
                tick: self.tick,
                token_vault0: self.token_vault0.to_string(),
                token_vault1: self.token_vault1.to_string(),
            }
        }
    }
    use crate::types::PositionRewardInfo;
    impl IntoProto<proto_def::PositionRewardInfo> for PositionRewardInfo {
        fn into_proto(self) -> proto_def::PositionRewardInfo {
            proto_def::PositionRewardInfo {
                growth_inside_last_x64: self.growth_inside_last_x64.to_string(),
                reward_amount_owed: self.reward_amount_owed,
            }
        }
    }
    use crate::types::RewardInfo;
    impl IntoProto<proto_def::RewardInfo> for RewardInfo {
        fn into_proto(self) -> proto_def::RewardInfo {
            proto_def::RewardInfo {
                reward_state: self.reward_state.into(),
                open_time: self.open_time,
                end_time: self.end_time,
                last_update_time: self.last_update_time,
                emissions_per_second_x64: self.emissions_per_second_x64.to_string(),
                reward_total_emissioned: self.reward_total_emissioned,
                reward_claimed: self.reward_claimed,
                token_mint: self.token_mint.to_string(),
                token_vault: self.token_vault.to_string(),
                authority: self.authority.to_string(),
                reward_growth_global_x64: self.reward_growth_global_x64.to_string(),
            }
        }
    }
    use crate::types::SwapEvent;
    impl IntoProto<proto_def::SwapEvent> for SwapEvent {
        fn into_proto(self) -> proto_def::SwapEvent {
            proto_def::SwapEvent {
                pool_state: self.pool_state.to_string(),
                sender: self.sender.to_string(),
                token_account0: self.token_account0.to_string(),
                token_account1: self.token_account1.to_string(),
                amount0: self.amount0,
                transfer_fee0: self.transfer_fee0,
                amount1: self.amount1,
                transfer_fee1: self.transfer_fee1,
                zero_for_one: self.zero_for_one,
                sqrt_price_x64: self.sqrt_price_x64.to_string(),
                liquidity: self.liquidity.to_string(),
                tick: self.tick,
            }
        }
    }
    use crate::types::TickState;
    impl IntoProto<proto_def::TickState> for TickState {
        fn into_proto(self) -> proto_def::TickState {
            proto_def::TickState {
                tick: self.tick,
                liquidity_net: self.liquidity_net.to_string(),
                liquidity_gross: self.liquidity_gross.to_string(),
                fee_growth_outside0_x64: self.fee_growth_outside0_x64.to_string(),
                fee_growth_outside1_x64: self.fee_growth_outside1_x64.to_string(),
                reward_growths_outside_x64: self
                    .reward_growths_outside_x64
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use crate::types::UpdateRewardInfosEvent;
    impl IntoProto<proto_def::UpdateRewardInfosEvent> for UpdateRewardInfosEvent {
        fn into_proto(self) -> proto_def::UpdateRewardInfosEvent {
            proto_def::UpdateRewardInfosEvent {
                reward_growth_global_x64: self
                    .reward_growth_global_x64
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
            }
        }
    }
}
